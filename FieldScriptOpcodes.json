[
	{
		"id": 0,
		"name": "RET",
		"longname": "Return from request / Halt",
		"description": "When an entity's script is being executed as part of a request (function call), the return opcode will cause current execution to halt and return to whatever the entity was previously executing (at some lower priority). If the execution was requested via a synchronous call (REQEW or PRQEW), the completion of execution is also signalled to the calling entity which can resume execution. If return is used when executing at base priority, execution will simply halt. This is what happens in the entry scripts."
	},
	{
		"id": 1,
		"name": "REQ",
		"longname": "Request remote execution (asynchronous, non-guaranteed)",
		"description": "Requests that a remote entity executes one of its member functions at a specified priority. The request is asynchronous and returns immediately without waiting for the remote execution to start or finish. If the specified priority is already busy executing, the request will fail silently.",
		"operands": [
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Entity ID"
			},
			{
				"name": "P",
				"size": "BitsInteger(3)",
				"description": "Priority"
			},
			{
				"name": "F",
				"size": "BitsInteger(5)",
				"description": "Function ID"
			}
		]
	},
	{
		"id": 2,
		"name": "REQSW",
		"longname": "Request remote execution (asynchronous execution, guaranteed)",
		"description": "Requests that a remote entity executes one of its member functions at a specified priority. If the specified priority is already busy executing, the request will block until it becomes available and only then return. The remote execution is still carried out asynchronously, with no notification of completion.",
		"operands": [
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Entity ID"
			},
			{
				"name": "P",
				"size": "BitsInteger(3)",
				"description": "Priority"
			},
			{
				"name": "F",
				"size": "BitsInteger(5)",
				"description": "Function ID"
			}
		]
	},
	{
		"id": 3,
		"name": "REQEW",
		"longname": "Request remote execution (synchronous, guaranteed)",
		"description": "Requests that a remote entity executes one of its member functions at a specified priority. The request will block until remote execution has finished before returning.",
		"operands": [
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Entity ID"
			},
			{
				"name": "P",
				"size": "BitsInteger(3)",
				"description": "Priority"
			},
			{
				"name": "F",
				"size": "BitsInteger(5)",
				"description": "Function ID"
			}
		]
	},
	{
		"id": 4,
		"name": "PREQ",
		"longname": "Request party entity execution (asynchronous, non-guaranteed)",
		"description": "Requests that the entity associated with a character in the current party executes one of its member functions at a specified priority. The request is asynchronous and returns immediately without waiting for the remote execution to start or finish. If the specified priority is already busy executing, the request will fail silently.",
		"operands": [
			{
				"name": "PM",
				"size": "Bytewise(Int8ul)",
				"description": "Party Member ID"
			},
			{
				"name": "P",
				"size": "BitsInteger(3)",
				"description": "Priority"
			},
			{
				"name": "F",
				"size": "BitsInteger(5)",
				"description": "Function ID"
			}
		]
	},
	{
		"id": 5,
		"name": "PRQSW",
		"longname": "Request party entity execution (asynchronous execution, guaranteed)",
		"description": "Requests that the entity associated with a character in the current party executes one of its member functions at a specified priority. If the specified priority is already busy executing, the request will block until it becomes available and only then return. The remote execution is still carried out asynchronously, with no notification of completion.",
		"operands": [
			{
				"name": "PM",
				"size": "Bytewise(Int8ul)",
				"description": "Party Member ID"
			},
			{
				"name": "P",
				"size": "BitsInteger(3)",
				"description": "Priority"
			},
			{
				"name": "F",
				"size": "BitsInteger(5)",
				"description": "Function ID"
			}
		]
	},
	{
		"id": 6,
		"name": "PRQEW",
		"longname": "Request party entity execution (asynchronous execution, guaranteed)",
		"description": "Requests that the entity associated with a character in the current party executes one of its member functions at a specified priority. The request will block until remote execution has finished before returning.",
		"operands": [
			{
				"name": "PM",
				"size": "Bytewise(Int8ul)",
				"description": "Party Member ID"
			},
			{
				"name": "P",
				"size": "BitsInteger(3)",
				"description": "Priority"
			},
			{
				"name": "F",
				"size": "BitsInteger(5)",
				"description": "Function ID"
			}
		]
	},
	{
		"id": 7,
		"name": "RETTO",
		"longname": "Return To",
		"description": "Gives script control to another script within the current entity, selected by F.",
		"operands": [
			{
				"name": "P",
				"size": "BitsInteger(3)",
				"description": "Priority"
			},
			{
				"name": "F",
				"size": "BitsInteger(5)",
				"description": "Function ID"
			}
		]
	},
	{
		"id": 8,
		"name": "JOIN",
		"longname": "Party Field Join",
		"description": "Causes seperated party characters that have previously been SPLIT onto the field, to be joined back together again; that is, only the party leader becomes visible on the field. This should be called if a previous SPLIT has completed (the party members have finished speaking, or performing their actions, for example). As with SPLIT, the speed of the join is specified, from a scale of 1 (almost instant) to FF (very slow walk), and must be non-zero. Calling JOIN without having previously SPLIT the characters will cause the party members to appear at the walkmesh origin and attempt to JOIN from there. This is not normally the required behaviour and should be avoided.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Speed"
			}
		]
	},
	{
		"id": 9,
		"name": "SPLIT",
		"longname": "Party Field Split",
		"description": "Causes the common 'split effect' whereby the second and third characters in the current party 'come out' from the party leader. That is, they become visible in the field, starting from the centre of the party leader, and move out to the coordinates specified in the argument list. This is commonly used when the other characters in the current party have an action or dialog to perform and must be individually visible in the field. As well as specifying final coordinates for the two other party characters, the directions each character faces after the split are specified as a byte, using the common direction values found throughout the game. Speed is also given and is used to specify the rate at which the characters leave the party leader, using a scale from 1 (almost instant) to FF (extremely slow walk); this must be non-zero.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "XA Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "YA Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "DA Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "XB Bank"
			},
			{
				"name": "B5",
				"size": "BitsInteger(4)",
				"description": "YB Bank"
			},
			{
				"name": "B6",
				"size": "BitsInteger(4)",
				"description": "DB Bank"
			},
			{
				"name": "XA",
				"size": "Bytewise(Int16ul)",
				"description": "X of 2nd character"
			},
			{
				"name": "YA",
				"size": "Bytewise(Int16ul)",
				"description": "Y of 2nd character"
			},
			{
				"name": "DA",
				"size": "Bytewise(Int8ul)",
				"description": "Direction of 2nd character"
			},
			{
				"name": "XB",
				"size": "Bytewise(Int16ul)",
				"description": "X of 3rd character"
			},
			{
				"name": "YB",
				"size": "Bytewise(Int16ul)",
				"description": "Y of 3rd character"
			},
			{
				"name": "DB",
				"size": "Bytewise(Int8ul)",
				"description": "Direction of 3rd character"
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Speed that the characters split"
			}
		]
	},
	{
		"id": 10,
		"name": "SPTYE",
		"longname": "Set Party From Memory",
		"description": "Sets the current party, using the Character ID values found at the banks and addresses specified by the arguments. It is possible to retrieve from three different banks. This is used to set a party back to the player's configuration after a certain event, that requires specific characters that have been set using PRTYE, has completed. An example would be the party being set to Barret only for the Dyne event/battle, and then returning the party back to the player's configuration before the Dyne event occurs.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "1st character Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "2nd character Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "3rd characted Bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "A1",
				"size": "Bytewise(Int8ul)",
				"description": "1st character address"
			},
			{
				"name": "A2",
				"size": "Bytewise(Int8ul)",
				"description": "2nd character address"
			},
			{
				"name": "A3",
				"size": "Bytewise(Int8ul)",
				"description": "3rd character address"
			}
		]
	},
	{
		"id": 11,
		"name": "GTPYE",
		"longname": "Get Party To Memory",
		"description": "Retrieves the current party's Character IDs into the banks and addresses specified for each party member. It is possible to retrieve values into three different banks, one for each member. This is used to store the player's party configuration before they are overridden for a special event that requires a specific character setup. The player's original party configuration can then be set back to its original setup using SPTYE.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "1st character Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "2nd character Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "3rd characted Bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "A1",
				"size": "Bytewise(Int8ul)",
				"description": "1st character address"
			},
			{
				"name": "A2",
				"size": "Bytewise(Int8ul)",
				"description": "2nd character address"
			},
			{
				"name": "A3",
				"size": "Bytewise(Int8ul)",
				"description": "3rd character address"
			}
		]
	},
	{
		"id": 12,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 13,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 14,
		"name": "DSKCG",
		"longname": "Disc Change Screen",
		"description": "Shows the Disk Change screen if the current disk in the drive does not match the argument given. The current script is halted until the correct disk is inserted. When the correct disk is inserted, the field fades back into view and execution continues as normal. If the disk is subsequently ejected on this field, the field is instantly hidden, and a one-line dialog box is shown asking the user to re-insert the disk where it again waits for the disk to be inserted. If a disk number outside the range 1 to 4 is specified, an image will show, as with normal disk change screens, but no text will display to identify which disk to insert.",
		"operands": [
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Disk Number"
			}
		]
	},
	{
		"id": 15,
		"name": "SPECIAL",
		"longname": "Special Opcode",
		"description": "Special is a multibyte opcode extension, mostly for game specific opcodes to FF7. The first argument specifies the type of operation and must be from the values listed below; the number of arguments after this must also match the number of arguments for the operation type.",
		"operands": [
			{
				"name": "SUBOP",
				"size": "Bytewise(Int8ul)",
				"description": "Suboperation"
			}
		]
	},
	{
		"id": 16,
		"name": "JMPF",
		"longname": "Jump forward",
		"description": "Jumps forward in the current script a specified amount. The jump begins just after the jump opcode itself and then skips the specified number of bytes. In the following example, the WAIT line is skipped. JMPF (04) WAIT (70,00) SOLID (01) If a jump longer than 0xFF is required, use JMPFL instead.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Amount to jump forward"
			}
		]
	},
	{
		"id": 17,
		"name": "JMPFL",
		"longname": "Jump forward (long)",
		"description": "Jumps forward in the current script a specified amount. The jump begins just after the jump opcode itself and then skips the specified number of bytes. Unlike JMPF, this jump command allows jumps longer than 0xFF bytes.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int16ul)",
				"description": "Amount to jump forward"
			}
		]
	},
	{
		"id": 18,
		"name": "JMPB",
		"longname": "Jump back",
		"description": "Jumps backward in the current script a specified amount. The jump begins just before the jump opcode itself and then moves the current byte pointer back the specified number of bytes. In the following example, the SOLID and WAIT lines are repeated indefinitely. SOLID (01) WAIT (70,00) JMPF (05) If a jump longer than 0xFF is required, use JMPBL instead.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Amount to jump backward"
			}
		]
	},
	{
		"id": 19,
		"name": "JMPBL",
		"longname": "Jump back (long)",
		"description": "Jumps backward in the current script a specified amount. The jump begins just before the jump opcode itself and then moves the current byte pointer back the specified number of bytes. Unlike JMPB, this jump command allows jumps longer than 0xFF bytes.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int16ul)",
				"description": "Amount to jump backward"
			}
		]
	},
	{
		"id": 20,
		"name": "IFUB",
		"longname": "If (Unsigned Byte)",
		"description": "Performs a comparison between a retrieved values from memory at specific banks and addresses. If B2 is zero, then the value retrieved from bank B1, address A is compared with the value specified by V. If B2 is not zero, then the value retrieved from bank B1, address A is compared with the value retrieved from bank B2, address V. The type of comparison used is shown in the table below. If the comparison fails, the script pointer jumps forward by the amount specified in the final argument; the starting offset for this jump is just before the jump value argument itself. This, combined with an appropriate jump forward, is used to implement if/else functionality in scripts, as demonstrated below. If the content of the 'if' block following the IFUB line is longer than 0xFF, the jump argument will also need to be longer than 0xFF, and hence the IFUBL variant is used instead. If the value to compare is larger than 0xFF, the IFUW/IFUWL variants are used. If the value being compared is negative, the IFSW/IFSWL variants are used. If/Else Example IFUB (10,20,30,02,06) WAIT (00,01) JMPF (04) WAIT (00,04) WAIT (00,02) RET () C++ code if(<10>[20] > 30) { WAIT(100); } else { WAIT(400); } WAIT(200); return;",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "V Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address from B1"
			},
			{
				"name": "V",
				"size": "Bytewise(Int8ul)",
				"description": "Value or address from B2"
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Comparison type : ID Comparison Performed 0 A == B 1 A != B 2 A > B 3 A < B 4 A >= B 5 A <= B 6 A & B 7 A ^ B 8 A | B 9 A & (1<<B) A !((A & (1<<B)))"
			},
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Amount to jump if false"
			}
		]
	},
	{
		"id": 21,
		"name": "IFUBL",
		"longname": "If (Unsigned Byte, Long Jump)",
		"description": "This is similar to the IFUB opcode, but it allows a jump of more than 0xFF if the comparison does not hold. This opcode is used if the 'if' block will be longer than 0xFF.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "V Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address from B1"
			},
			{
				"name": "V",
				"size": "Bytewise(Int8ul)",
				"description": "Value or address from B2"
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Comparison type : ID Comparison Performed 0 A == B 1 A != B 2 A > B 3 A < B 4 A >= B 5 A <= B 6 A & B 7 A ^ B 8 A | B 9 A & (1<<B) A !((A & (1<<B)))"
			},
			{
				"name": "E",
				"size": "Bytewise(Int16ul)",
				"description": "Amount to jump if false"
			}
		]
	},
	{
		"id": 22,
		"name": "IFSW",
		"longname": "If (Signed Word)",
		"description": "This is similar to the IFUW opcode, but the value compared to may be negative.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "V Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int16ul)",
				"description": "Address from B1"
			},
			{
				"name": "V",
				"size": "Bytewise(Int16ul)",
				"description": "Value or address from B2"
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Comparison type : ID Comparison Performed 0 A == B 1 A != B 2 A > B 3 A < B 4 A >= B 5 A <= B 6 A & B 7 A ^ B 8 A | B 9 A & (1<<B) A !((A & (1<<B)))"
			},
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Amount to jump if false"
			}
		]
	},
	{
		"id": 23,
		"name": "IFSWL",
		"longname": "If (Signed Word, Long Jump)",
		"description": "This is similar to the IFSW opcode in allowing the comparison value to be negative, but in addition, allows the jump on comparison failure to be longer than 0xFF bytes.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "V Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int16ul)",
				"description": "Address from B1"
			},
			{
				"name": "V",
				"size": "Bytewise(Int16ul)",
				"description": "Value or address from B2"
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Comparison type : ID Comparison Performed 0 A == B 1 A != B 2 A > B 3 A < B 4 A >= B 5 A <= B 6 A & B 7 A ^ B 8 A | B 9 A & (1<<B) A !((A & (1<<B)))"
			},
			{
				"name": "E",
				"size": "Bytewise(Int16ul)",
				"description": "Amount to jump if false"
			}
		]
	},
	{
		"id": 24,
		"name": "IFUW",
		"longname": "If (Unsigned Word)",
		"description": "This is similar to the IFUB opcode, but it allows the value to be larger than 0xFF.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "V Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int16ul)",
				"description": "Address from B1"
			},
			{
				"name": "V",
				"size": "Bytewise(Int16ul)",
				"description": "Value or address from B2"
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Comparison type : ID Comparison Performed 0 A == B 1 A != B 2 A > B 3 A < B 4 A >= B 5 A <= B 6 A & B 7 A ^ B 8 A | B 9 A & (1<<B) A !((A & (1<<B)))"
			},
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Amount to jump if false"
			}
		]
	},
	{
		"id": 25,
		"name": "IFUWL",
		"longname": "If (Unsigned Word, Long Jump)",
		"description": "This is similar to the IFUW opcode, but allows for a jump on comparison failure of more than 0xFF bytes.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "V Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int16ul)",
				"description": "Address from B1"
			},
			{
				"name": "V",
				"size": "Bytewise(Int16ul)",
				"description": "Value or address from B2"
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Comparison type : ID Comparison Performed 0 A == B 1 A != B 2 A > B 3 A < B 4 A >= B 5 A <= B 6 A & B 7 A ^ B 8 A | B 9 A & (1<<B) A !((A & (1<<B)))"
			},
			{
				"name": "E",
				"size": "Bytewise(Int16ul)",
				"description": "Amount to jump if false"
			}
		]
	},
	{
		"id": 26,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 27,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 28,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 29,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 30,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 31,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 32,
		"name": "MINIGAME",
		"longname": "Minigame Start",
		"description": "Begins the minigame as defined by the final byte. Once the minigame has completed, the map ID given as the argument is loaded and the playable character is moved to the XYZ co-ordinates also specified. If an invalid minigame ID is passed as the final argument, the return map is loaded immediately.",
		"operands": [
			{
				"name": "M",
				"size": "Bytewise(Int16ul)",
				"description": "Map ID to return to after game has completed"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X coordinate of player after game has completed"
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y coordinate of player after game has completed"
			},
			{
				"name": "Z",
				"size": "Bytewise(Int16ul)",
				"description": "Z coordinate of player after game has completed"
			},
			{
				"name": "G",
				"size": "Bytewise(Int8ul)",
				"description": "Game specific value"
			},
			{
				"name": "T",
				"size": "Bytewise(Int8ul)",
				"description": "Minigame type: ID Minigame 0 Bike 1 Chocobo Races 2 Snowboard (Icicle version; no music or menu) 3 Fort Condor 4 Submarine 5 Speed Square 6 Snowboard (Gold Saucer version; music plays and the Retry menu can be accessed)"
			}
		]
	},
	{
		"id": 33,
		"name": "TUTOR",
		"longname": "Play Tutorial",
		"description": "Opens the main menu and plays the tutorial specified. The tutorial with the given ID must exist in the field file (PlayStation) or inside the flevel.lgp archive (PC), or the menu will not be closable. On the PlayStation version, the tutorials reside after the dialog and AKAO blocks of Section 1. On the PC version, the same tutorials can be found in this location, but are not used and redundant since the dialogs are PlayStation-specific, such as \"You'll need a Memory Card to save your games\". Instead, the PC-specific tutorials are used, which are located in the flevel.lgp archive and end with the extension .tut.",
		"operands": [
			{
				"name": "T",
				"size": "Bytewise(Int8ul)",
				"description": "Tutorial ID"
			}
		]
	},
	{
		"id": 34,
		"name": "BTMD2",
		"longname": "Battle Mode",
		"description": "Sets properties for the battle module. The argument is a bit field with bits that can be ORd together to set multiple battle properties.",
		"operands": [
			{
				"name": "BF1",
				"size": "Bytewise(Int8ul)",
				"description": "Bit Description (Bit set to 1) 0x80 (10000000) Do not display the AP/EXP/Gil/items received screens. 0x40 (01000000) Activates the battle arena. The next chosen BATTLE instead takes place in the arena,but keeping the same enemy formation. The \"keep going/no way\" interface is enabled. 0x20 (00100000) Do not play the battle victory music. 0x08 (00001000) The party cannot escape the battle. 0x04 (00000100) Pre-emptive attack. 0x02 (00000010) The battle is timed; the player must complete the battle before the timer reaches zero, or the battle exits, with no AP/EXP/Gil/items received screens displayed."
			},
			{
				"name": "BF2",
				"size": "Bytewise(Int8ul)",
				"description": "Bit Description (Bit set to 1) 0x01 (00000001) The party members do not perform their victory celebrations at the end of battle."
			},
			{
				"name": "BF3",
				"size": "Bytewise(Int8ul)",
				"description": "Bit Description (Bit set to 1) 0x80 (10000000) Disable game over. After a party defeat, the game returns to the previous field. 0x01 (00000001) Unknown, but used by some fields"
			},
			{
				"name": "BF4",
				"size": "Bytewise(Int8ul)",
				"description": null
			}
		]
	},
	{
		"id": 35,
		"name": "BTRLD",
		"longname": "Battle Result Load",
		"description": "Stores the result of the last BATTLE to an address in memory. The resulting value can then be examined to see what the outcome of the battle was.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Bank to store result (should be a 16bit bank)"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store result"
			}
		]
	},
	{
		"id": 36,
		"name": "WAIT",
		"longname": "Wait",
		"description": "Pauses current script execution for a specific amount of time. Rather than a specific time value in milliseconds/seconds, the amount specifies the number of frames that must be drawn before execution resumes. Since the game runs at 30fps, WAIT(0x1E) (or WAIT(30) in decimal) will pause script execution for 1 second, WAIT(0x96) will pause for 5 seconds, and so on.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int16ul)",
				"description": "Amount (number of frames) to wait."
			}
		]
	},
	{
		"id": 37,
		"name": "NFADE",
		"longname": null,
		"description": null
	},
	{
		"id": 38,
		"name": "BLINK",
		"longname": "Character Blink",
		"description": "Specifies whether the eyes of the current entity's visible object should blink at random intervals. As there is no argument to specify which character this refers to, this opcode must be placed in the correct character entity's script. To open or shut the character's eyes (change the eye texture used), use KAWAI.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Switch on/off (0/1, respectively)."
			}
		]
	},
	{
		"id": 39,
		"name": "BGMOVIE",
		"longname": null,
		"description": null
	},
	{
		"id": 40,
		"name": "KAWAI",
		"longname": "Character Graphics Opcode (Multibyte sequence)",
		"description": "KAWAI is a multipurpose, graphics-related opcode that performs a variety of different operations on visible entity objects, depending on the subop argument. It was named after Final Fantasy VII's Character Programmer, Hiroshi Kawai.",
		"operands": [
			{
				"name": "L",
				"size": "Bytewise(Int8ul)",
				"description": "Total length of the entire opcode and argument list."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Operation to perform 00 EYETX 01 TRNSP 02 AMBNT 06 LIGHT 0A SBOBJ 0D SHINE FF RESET"
			}
		]
	},
	{
		"id": 41,
		"name": "KAWIW",
		"longname": "Wait For Kawai",
		"description": "Halts script execution until a prior KAWAI operation has completed, such as a LIGHT movement."
	},
	{
		"id": 42,
		"name": "PMOVA",
		"longname": "Move to Party Member",
		"description": "Makes the field object/character that the script's entity is assigned to, move/walk to the party member specified by P. When the object reaches its destination, script execution continues.",
		"operands": [
			{
				"name": "P",
				"size": "Bytewise(Int8ul)",
				"description": "Party member to move towards (0 to 2)."
			}
		]
	},
	{
		"id": 43,
		"name": "SLIP",
		"longname": "Slipability",
		"description": "If SLIP is set to off, the player will be unable to let the playable character run against and along the wall by pressing two buttons together. For example, if there is a wall beyond the character running left-to-right, and the character presses up and right together, the character will normally run to the right along the wall. If SLIP is off, the character will stop moving until the player presses right by itself; the combination of up and right together is disallowed. This is sometimes used in areas such as shops. This should be used in combination with a LINE to specify the line along which the player may not 'slip'.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "On/off switch (0/1, respectively)."
			}
		]
	},
	{
		"id": 44,
		"name": "BGPDH",
		"longname": "Background Depth",
		"description": "Sets the Z-depth for the extra background layer specified by L. This opcode will only set the depth of those extra layers above the standard background and foreground layers (0/1, respectively), and so should be an argument of 2 or greater.",
		"operands": [
			{
				"name": "B",
				"size": "BitsInteger(4)",
				"description": "Bank to retrieve value for D"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "L",
				"size": "Bytewise(Int8ul)",
				"description": "ID number of the layer to manipulate."
			},
			{
				"name": "D",
				"size": "Bytewise(Int16ul)",
				"description": "Z-depth of the specified layer, or the address to find D if B is non-zero."
			}
		]
	},
	{
		"id": 45,
		"name": "BGSCR",
		"longname": "Background Scroll",
		"description": "Scrolls the background layer specified by L. This opcode will only scroll those extra layers above the standard background and foreground layers (0/1, respectively), and so should be an argument of 2 or greater. The X and Y speeds are signed; positive values scroll from right-to-left and bottom-to-top, whilst negative values scroll from left-to-right and top-to-bottom.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "L",
				"size": "Bytewise(Int8ul)",
				"description": "ID number of the layer to manipulate."
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "Speed of the scroll in the X direction; positive values indicate right-to-left scrolling."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Speed of the scroll in the Y direction; positive values indicate bottom-to-top scrolling."
			}
		]
	},
	{
		"id": 46,
		"name": "WCLS",
		"longname": null,
		"description": null
	},
	{
		"id": 47,
		"name": "WSIZW",
		"longname": "Window Resize",
		"description": "Resizes and/or repositions the window, after it has been created with the WINDOW opcode. On the next MESSAGE or ASK, the window will be positioned and sized with the new properties.",
		"operands": [
			{
				"name": "I",
				"size": "Bytewise(Int8ul)",
				"description": "WINDOW ID to resize"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate of the window."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate of the window."
			},
			{
				"name": "W",
				"size": "Bytewise(Int16ul)",
				"description": "Width of the window."
			},
			{
				"name": "H",
				"size": "Bytewise(Int16ul)",
				"description": "Height of the window."
			}
		]
	},
	{
		"id": 48,
		"name": "IFKEY",
		"longname": "If Key Pressed",
		"description": "Checks the status of a button being pressed; if pressed, regardless of the previous condition of the button press state (see IFKEYON / IFKEYOFF), the \"if\" body executes (that is, the script pointer is moved to the opcode after the current IFKEY). If the checked button fails the condition check, then the script pointer moves ahead A bytes. The highlighted keys in the button ID table below do not quite act as the rest when used with this particular opcode. For these keys, IFKEY acts in the same manner as IFKEYON; these keys cannot be checked repeatedly, and the if statement body will only execute once, regardless of whether the key is being held down. Button IDs can be ORd with each other to produce a combination of keys to check in one statement. For example, IFKEY with a key ID of 0x00F0 will check if any of the directional buttons are being pressed.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int16ul)",
				"description": "Button Ids to check for: ID Button 0x0001 Assist 0x0008 Start 0x0010 Up 0x0020 Right 0x0040 Down 0x0080 Left 0x0100 Camera 0x0200 Target 0x0400 Page Up 0x0800 Page Down 0x1000 Menu 0x2000 OK 0x4000 Cancel 0x8000 Switch"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Amount to jump if button not pressed."
			}
		]
	},
	{
		"id": 49,
		"name": "IFKEYON",
		"longname": "If Key Pressed (First Time)",
		"description": "Similar to IFKEY, IFKEYON checks if a button is being pressed with the given ID (matching those in IFKEY). However, the body of the \"if\" statement only executes if this is the first time the button has been recorded as being pressed. If this is not the first time it is being pressed (that is, the user has held the key down), the condition evaluates to false, and the \"if\" statement body does not execute, moving the script pointer forward by A. This is an effective way to stop repeatedly executing the body of the \"if\" statement due to the user holding the key down; thus, the body of the statement will only execute once. The button state is reset when the user lets go of the button, and at this point, IFKEYON may evaluate to true once more when the button is repressed",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int16ul)",
				"description": "Button Ids to check for: ID Button 0x0001 Assist 0x0008 Start 0x0010 Up 0x0020 Right 0x0040 Down 0x0080 Left 0x0100 Camera 0x0200 Target 0x0400 Page Up 0x0800 Page Down 0x1000 Menu 0x2000 OK 0x4000 Cancel 0x8000 Switch"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Amount to jump if button not pressed."
			}
		]
	},
	{
		"id": 50,
		"name": "IFKEYOFF",
		"longname": "If Key Lifted",
		"description": "Similar to IFKEYON. Rather than check if this is the first time the user has pressed the button with the given ID, IFKEYOFF will not execute the body of the \"if\" statement until the user has lifted the key that was previously held down or pressed. This way, the body of the statement will only be executed once, when the key is no longer pressed.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int16ul)",
				"description": "Button Ids to check for: ID Button 0x0001 Assist 0x0008 Start 0x0010 Up 0x0020 Right 0x0040 Down 0x0080 Left 0x0100 Camera 0x0200 Target 0x0400 Page Up 0x0800 Page Down 0x1000 Menu 0x2000 OK 0x4000 Cancel 0x8000 Switch"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Amount to jump if button not pressed."
			}
		]
	},
	{
		"id": 51,
		"name": "UC",
		"longname": "Character movability",
		"description": "Disables or enables the movability of the playable character, and hides arrows and the hand pointer. If switched to off (1), the player cannot move the character using the directional buttons until a corresponding UC (0) is called, at which point the arrows and hand pointer return.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "On/off switch (0/1, respectively)."
			}
		]
	},
	{
		"id": 52,
		"name": "PDIRA",
		"longname": "Face Party Member",
		"description": "Instantly turns the field object to face the party member specified by C. In contrast to PTURA, the turn is not gradual, and the parameter is not a party member ID (from 0 for the first to 2 for the third in the party), but a Character ID (like in MMBud). If the specified character ID is not in your party, the field object will turn to the main character.",
		"operands": [
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID to face."
			}
		]
	},
	{
		"id": 53,
		"name": "PTURA",
		"longname": "Turn to Party Member",
		"description": "Rotates (turns) the field object to face the party member specified by P (from 0 to 2), at the speed S. The \"standard\" value for A is 2.",
		"operands": [
			{
				"name": "P",
				"size": "Bytewise(Int8ul)",
				"description": "Party member to turn towards."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Speed of turning; the larger the number, the slower the turn."
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Larger numbers increase the likelihood that the turn will be anticlockwise."
			}
		]
	},
	{
		"id": 54,
		"name": "WSPCL",
		"longname": "Window Special (Numerical Display)",
		"description": "Creates a numerical display inside the given window. The display can be either in the form of a clock, or a scoreboard with six digits. This only creates the numerical display; to actually show it, a MESSAGE or ASK command needs to be issued. Using a blank line of dialog will allow you to create a numerical display in the top-left of the window without field dialog hidden behind it. Alternatively, dialog can be shown along with the display by placing the display in an appropriate area of the window. To set the time for the clock variant, STTIM is used. To set the number for the numerical display, WNUMB is used.",
		"operands": [
			{
				"name": "W",
				"size": "Bytewise(Int8ul)",
				"description": "WINDOW ID to apply the change to."
			},
			{
				"name": "T",
				"size": "Bytewise(Int8ul)",
				"description": "Type of display ID Display Type 0 None 1 Clock (00:00) 2 Numeric (000000)"
			},
			{
				"name": "X",
				"size": "Bytewise(Int8ul)",
				"description": "X-coordinate of the numerical display, relative to the top-left of the window."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int8ul)",
				"description": "Y-coordinate of the numerical display, relative to the top-left of the window."
			}
		]
	},
	{
		"id": 55,
		"name": "WNUMB",
		"longname": "Set Number",
		"description": "Sets the numerical display, as found in the WSPCL opcode. The number may be set with a specified value or retrieved from two 16-bit values, and the number of digits to show is specified with C. Unlike the other special window setting function, STTIM, the WINDOW ID must be given for this opcode. If the value does not fit in the specified number of digits for the display, the higher units are not displayed.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "Bank to retrieve lower two bytes of number, or zero if number is given as a literal value."
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Bank to retrieve higher two bytes of number, or zero if number is given as a literal value."
			},
			{
				"name": "W",
				"size": "Bytewise(Int8ul)",
				"description": "Window ID whose numerical display will be set."
			},
			{
				"name": "N",
				"size": "Bytewise(Int32ul)",
				"description": "A four-byte number to set the numerical display. If B1 or B2 are non-zero, this value is split into two two-byte values, indicating the address to find the number value in banks B1 and B2, respectively."
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "The number of digits to display, from 1 to 8."
			}
		]
	},
	{
		"id": 56,
		"name": "STTIM",
		"longname": "Set Timer",
		"description": "Sets the clock, as found in the WSPCL opcode. If the hours, minutes or seconds are specified in the argument, the corresponding B nybble is zero. Otherwise, the value for the time component is retrieved from the bank and address specified. The seperate time components can be retrieved from memory or specified as a value, in the same argument list, as demonstrated below. Hours are not directly visible on the clock, as it only displays minutes and seconds. Hours are translated into minutes, so if you specify one hour, the clock displays 60 minutes, and so on."
	},
	{
		"id": 57,
		"name": "GOLDu",
		"longname": "Gil Up",
		"description": "Increases the amount of gil by a constant amount, or by an amount found in the source bank B and address A. The total gil is capped above by 0xFFFFFFFF; attempts to increment further will fail.",
		"operands": [
			{
				"name": "B",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "A",
				"size": "Bytewise(Int32ul)",
				"description": "Amount to increase/Address of source in bank B"
			}
		]
	},
	{
		"id": 58,
		"name": "GOLDd",
		"longname": "Gil Down",
		"description": "Decreases the amount of gil by a constant amount, or by an amount found in the source bank B and address A. The total gil is capped below by 0; attempts to decrement further will fail.",
		"operands": [
			{
				"name": "B",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "A",
				"size": "Bytewise(Int32ul)",
				"description": "Amount to decrease/Address of source in bank B"
			}
		]
	},
	{
		"id": 59,
		"name": "CHGLD",
		"longname": "Check Gil",
		"description": "Copies the amount of gil the party has into the destination addresses. As the gil amount is a four-byte value, the arguments require two destination addresses to place two two-byte values into. Address 1 takes the lower two bytes of the gil amount, while address 2 takes the higher two bytes.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "Destination bank 1"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Destination bank 2"
			},
			{
				"name": "A1",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address 1"
			},
			{
				"name": "A2",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address 2"
			}
		]
	},
	{
		"id": 60,
		"name": "HMPMAX1",
		"longname": "HP/MP Maximum",
		"description": "An alias for HMPMAX3."
	},
	{
		"id": 61,
		"name": "HMPMAX2",
		"longname": "HP/MP Maximum",
		"description": "An alias for HMPMAX3."
	},
	{
		"id": 62,
		"name": "MHMMX",
		"longname": "All HP/MP Maximum with Status Clear",
		"description": "Restores full HP and MP of every available character, even those outside the current party, as well as removing status effects."
	},
	{
		"id": 63,
		"name": "HMPMAX3",
		"longname": "HP/MP Maximum",
		"description": "Restores full HP and MP of every party member, but not those outside the current party. It does not remove status effects such as Fury or Sadness, but will revive KOd party members."
	},
	{
		"id": 64,
		"name": "MESSAGE",
		"longname": "Message display",
		"description": "Displays a dialog in the WINDOW that has previously been initialised to display this dialog.",
		"operands": [
			{
				"name": "N",
				"size": "Bytewise(Int8ul)",
				"description": "The ID of the window to use."
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "The zero-based index of the dialog that will be displayed."
			}
		]
	},
	{
		"id": 65,
		"name": "MPARA",
		"longname": "Message Parameter (8-bit value/address)",
		"description": "Replaces the Variable Control Code, found in lines of dialog, with a specific value. This allows either literal values or values retrieved from memory to be displayed in message boxes. Message parameters are set, and then the dialog with the Variable control codes is displayed using MESSAGE, as normal. The ID of the Window must be provided, but this can be still be provided before the window has been created using WINDOW. For lines of dialog with multiple Variable codes, the I argument identifies which code this value should replace, starting from zero for the first Variable code found in the line of dialog about to be displayed. If B is non-zero, then bank B and address V will be accessed to retrieve the value that will be used in inserting into the dialog. Otherwise, the value provided by V is inserted as-is into the control code. Whilst the V argument is one byte, if the address retrieved from is a 16-bit bank, a 16-bit value will display. The 8-bit nature of this opcode refers solely to the final argument size, and the size of the literal that can be specified. If a literal of greater than 0xFF is needed, MPRA2 is used instead.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "V Bank"
			},
			{
				"name": "W",
				"size": "Bytewise(Int8ul)",
				"description": "WINDOW ID for this parameter."
			},
			{
				"name": "I",
				"size": "Bytewise(Int8ul)",
				"description": "ID of the \"Variable\" dialog code that this value will replace."
			},
			{
				"name": "V",
				"size": "Bytewise(Int8ul)",
				"description": "Value to insert into dialog, or address of value, if B is non-zero."
			}
		]
	},
	{
		"id": 66,
		"name": "MPRA2",
		"longname": "Message Parameter (16-bit)",
		"description": "Similar to MPARA, but allows a constant value of greater than one byte to be supplied. This does not apply if B is non-zero, as the address the value is retrieved from must be in the range 0 to 0xFF.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "V Bank"
			},
			{
				"name": "W",
				"size": "Bytewise(Int8ul)",
				"description": "WINDOW ID for this parameter."
			},
			{
				"name": "I",
				"size": "Bytewise(Int8ul)",
				"description": "ID of the \"Variable\" dialog code that this value will replace."
			},
			{
				"name": "V",
				"size": "Bytewise(Int16ul)",
				"description": "Value to insert into dialog, or address of value, if B is non-zero."
			}
		]
	},
	{
		"id": 67,
		"name": "MPNAM",
		"longname": "Map Name",
		"description": "Sets the name of this map to the dialog ID given by D. The map name is found in the box in the bottom-right of the main menu, below the time and gil box.",
		"operands": [
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Dialog ID"
			}
		]
	},
	{
		"id": 68,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 69,
		"name": "MPu",
		"longname": "MP Up",
		"description": "Increases the MP of the party member specified by P by the amount V. If B is non-zero, then the value to increase by is retrieved from bank B and address V.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "V Bank"
			},
			{
				"name": "P",
				"size": "Bytewise(Int8ul)",
				"description": "Party member whose MP will increase (0 to 2)."
			},
			{
				"name": "V",
				"size": "Bytewise(Int16ul)",
				"description": "Value to increase MP by, or address to retrieve value from if B is non-zero."
			}
		]
	},
	{
		"id": 70,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 71,
		"name": "MPd",
		"longname": "MP Down",
		"description": "Decreases the MP of the party member specified by P by the amount V. If B is non-zero, then the value to decrease by is retrieved from bank B and address V.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "V Bank"
			},
			{
				"name": "P",
				"size": "Bytewise(Int8ul)",
				"description": "Party member whose MP will decrease (0 to 2)."
			},
			{
				"name": "V",
				"size": "Bytewise(Int16ul)",
				"description": "Value to decrease MP by, or address to retrieve value from if B is non-zero."
			}
		]
	},
	{
		"id": 72,
		"name": "ASK",
		"longname": "Ask Question",
		"description": "The ASK command opens a window with a set of choices to be picked with the \"selector finger\". If ASK is called on an open window ID, the window will shrink closed and re-open with the new data.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Bank to put line number selected."
			},
			{
				"name": "W",
				"size": "Bytewise(Int8ul)",
				"description": "Window ID to place the question in. (Initialized with WINDOW)"
			},
			{
				"name": "M",
				"size": "Bytewise(Int8ul)",
				"description": "Which dialog to display from dialog table."
			},
			{
				"name": "F",
				"size": "Bytewise(Int8ul)",
				"description": "Line from dialog where the first question is."
			},
			{
				"name": "L",
				"size": "Bytewise(Int8ul)",
				"description": "Line from dialog where the last question is."
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address in bank where line selected is written."
			}
		]
	},
	{
		"id": 73,
		"name": "MENU",
		"longname": "Menu",
		"description": "MENU has two uses. Its primary function is to display a menu or other special screen; these menus range from the character name entry screen, to a shop, and even the staff credit display. The type of display can be found in the first table below. The other function is to provide a set of special events that would normally be accomplished through a set of opcodes, but are instead coded directly into a MENU call. These events are provided in the second table. Some types of menu are erroneous or produce erratic behaviour, and were most likely used for testing. As such, they are not listed here.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "P Bank"
			},
			{
				"name": "T",
				"size": "Bytewise(Int8ul)",
				"description": "Type of menu, or special event. ID Menu Type 5 FF7 Credits 6 Character Name Entry 7 Party Select 8 Shop 9 Main Menu E Save Screen ID Event Type F Yuffie's Materia Steal (Remove All Materia) 12 Remove Cloud's Materia 13 Restore Cloud's Materia"
			},
			{
				"name": "P",
				"size": "Bytewise(Int8ul)",
				"description": "Parameter to the menu, or address of parameter value, if B is non-zero."
			}
		]
	},
	{
		"id": 74,
		"name": "MENU2",
		"longname": "Main menu accessibility",
		"description": "Disables or enables access to the main menu through the [MENU] key/button. Transitioning to another field will re-enable the menu.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "On/off switch (0/1, respectively)."
			}
		]
	},
	{
		"id": 75,
		"name": "BTLTB",
		"longname": "Battle Table",
		"description": "Switches between the two sets of encounter data that may exist in a field file, depending on the ID given.",
		"operands": [
			{
				"name": "I",
				"size": "Bytewise(Int8ul)",
				"description": "ID of the encounter table to use, either 0 (standard) or 1."
			}
		]
	},
	{
		"id": 76,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 77,
		"name": "HPu",
		"longname": "HP Up",
		"description": "Increases the HP of the party member specified by P by the amount V. If B is non-zero, then the value to increase by is retrieved from bank B and address V.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "V Bank"
			},
			{
				"name": "P",
				"size": "Bytewise(Int8ul)",
				"description": "Party member whose HP will increase (0 to 2)."
			},
			{
				"name": "V",
				"size": "Bytewise(Int16ul)",
				"description": "Value to increase HP by, or address to retrieve value from if B is non-zero."
			}
		]
	},
	{
		"id": 78,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 79,
		"name": "HPd",
		"longname": "HP Down",
		"description": "Decreases the HP of the party member specified by P by the amount V. If B is non-zero, then the value to decrease by is retrieved from bank B and address V.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "V Bank"
			},
			{
				"name": "P",
				"size": "Bytewise(Int8ul)",
				"description": "Party member whose HP will decrease (0 to 2)."
			},
			{
				"name": "V",
				"size": "Bytewise(Int16ul)",
				"description": "Value to decrease HP by, or address to retrieve value from if B is non-zero."
			}
		]
	},
	{
		"id": 80,
		"name": "WINDOW",
		"longname": "Window creation",
		"description": "Creates a window with a given ID and placement/size parameters. Windows are used to show dialog, present choices and so on, each of which reference the window's ID to insert text. This command only initializes a window ID, but does not present itself until a dialog command is issued on it.",
		"operands": [
			{
				"name": "N",
				"size": "Bytewise(Int8ul)",
				"description": "The numerical ID that the newly-created window will be associated with."
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate of the window."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate of the window."
			},
			{
				"name": "W",
				"size": "Bytewise(Int16ul)",
				"description": "Window width."
			},
			{
				"name": "H",
				"size": "Bytewise(Int16ul)",
				"description": "Window height."
			}
		]
	},
	{
		"id": 81,
		"name": "WMOVE",
		"longname": "Window Move",
		"description": "Repositions the window, with the given ID, and a (x,y) translation. The window will be repositioned the next time a MESSAGE or ASK, referencing this window, is issued.",
		"operands": [
			{
				"name": "I",
				"size": "Bytewise(Int8ul)",
				"description": "WINDOW ID to resize."
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-translation of the window."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-translation of the window."
			}
		]
	},
	{
		"id": 82,
		"name": "WMODE",
		"longname": "Window Mode",
		"description": "Changes properties associated with the WINDOW whose ID is specified. The mode byte sets the style of the window, as detailed below. If the final byte is set to 1, the window cannot be closed by the player pushing [OK]. The mode of the window should be changed before it is displayed with MESSAGE or ASK, or the changes will not be visible unless the window is closed and reopened.",
		"operands": [
			{
				"name": "N",
				"size": "Bytewise(Int8ul)",
				"description": "The ID of the window whose mode will be set."
			},
			{
				"name": "M",
				"size": "Bytewise(Int8ul)",
				"description": "Mode of the window. ID Mode 0 Normal 1 No Background/Border 2 Transparent Background"
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Window permanency."
			}
		]
	},
	{
		"id": 83,
		"name": "WREST",
		"longname": "Window Reset",
		"description": "Resets the given window, including the following parameters: Position and size, set by WMOVE, WSIZW, WROW or even the initial values set by WINDOW; Background type, set by WMODE; Numerical displays, set by WSPCL; Message parameters, set by MPARA and MPRA2. The reset window has a position of approximately (5,5), with a width and height of approximately (0x130, 0x45).",
		"operands": [
			{
				"name": "N",
				"size": "Bytewise(Int8ul)",
				"description": "The ID of the window to reset."
			}
		]
	},
	{
		"id": 84,
		"name": "WCLSE",
		"longname": "Window Close",
		"description": "Closes the given window.",
		"operands": [
			{
				"name": "N",
				"size": "Bytewise(Int8ul)",
				"description": "The ID of the window to close."
			}
		]
	},
	{
		"id": 85,
		"name": "WROW",
		"longname": "Window Rows",
		"description": "Sets the height of the window with ID N, by adjusting it to fit a specified number of rows of text, as given by R. If the dialog does not fit after adjusting the height of the window, the player will be able to scroll the dialog in the window by pressing [OK] to see the proceeding lines of text. When all text has scrolled, the window will close as normal.",
		"operands": [
			{
				"name": "N",
				"size": "Bytewise(Int8ul)",
				"description": "The ID of the window whose height will be set."
			},
			{
				"name": "R",
				"size": "Bytewise(Int8ul)",
				"description": "Number of rows of text that should fit in this window."
			}
		]
	},
	{
		"id": 86,
		"name": "GWCOL",
		"longname": "Get Window Colour",
		"description": "Gets the colour used in the gradient for windows in which text is displayed, into the banks and address specified.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "C Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "R Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "G Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "B Bank"
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Corner to check, or address to retrieve value if B1 is non-zero. 0 Top Left 1 Bottom Left 2 Top Right 3 Bottom Right"
			},
			{
				"name": "R",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store red component in bank B2."
			},
			{
				"name": "G",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store green component in bank B3."
			},
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store blue component in bank B4."
			}
		]
	},
	{
		"id": 87,
		"name": "SWCOL",
		"longname": "Set Window Colour",
		"description": "Sets the colour for a particular corner of the gradient used in windows for displaying text.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "C Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "R Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "G Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "B Bank"
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Corner to check, or address to retrieve value if B1 is non-zero. 0 Top Left 1 Bottom Left 2 Top Right 3 Bottom Right"
			},
			{
				"name": "R",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store red component in bank B2."
			},
			{
				"name": "G",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store green component in bank B3."
			},
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store blue component in bank B4."
			}
		]
	},
	{
		"id": 88,
		"name": "STITM",
		"longname": "Set Item",
		"description": "Adds a new item to the inventory. Either the item is added explicitly with values, in which case B1 and B2 are zero, or the item type and quantity are retrieved from memory. In this case, bank B1 and address T retrieve the item type, whilst bank B2 and address A retrieve the quantity to add. Example The following example adds 10 (0xA) Elixirs (ID 0x5) using temporary bank 5 and address 1C for item type, and a value for item quantity. SETBYTE(50,1C,5) STITM(50,1C,0,A)",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "T Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "T",
				"size": "Bytewise(Int16ul)",
				"description": "Type of item to add, or source address to retrieve item type from."
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Amount of item to add, or source address to retrieve item quantity from."
			}
		]
	},
	{
		"id": 89,
		"name": "DLITM",
		"longname": "Delete Item",
		"description": "Removes a quantity of an item from the inventory. Either the item is removed explicitly with values, in which case B1 and B2 are zero, or the item type and quantity are retrieved from memory. In this case, bank B1 and address T retrieve the item type, whilst bank B2 and address A retrieve the quantity to remove.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "T Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "T",
				"size": "Bytewise(Int16ul)",
				"description": "Type of item to delete, or source address to retrieve item type from."
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Amount of item to remove, or source address to retrieve item quantity from."
			}
		]
	},
	{
		"id": 90,
		"name": "CKITM",
		"longname": "Check Item",
		"description": "Copies the amount of item I the player has in their inventory, to the bank and address specified.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Bank to store result."
			},
			{
				"name": "I",
				"size": "Bytewise(Int16ul)",
				"description": "Item ID to check."
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store result."
			}
		]
	},
	{
		"id": 91,
		"name": "SMTRA",
		"longname": "Set Materia",
		"description": "Adds a new piece of materia to the materia inventory. This is either done by explicitly providing the materia type and AP value, in which case the first two bytes are zero, or by retrieving these values from memory. Both setting the values explicitly and retrieving from memory can be used together in one call by setting the correct bytes to zero; to see an example, please check below. If B1 is non-zero, then T specifies the address to be used with B1 to find the value for materia type. If B2, B3 or B4 are non-zero, these three bytes specify the addresses to retrieve the values for this unit. B2 and the first AP byte specifies the lowest-unit (16^1) hex value to retrieve, corresponding to 0-16 gil; B3 and the second AP byte specifies the middle-unit (16^2) hex value to retrieve; B4 and the third AP byte the highest-unit (16^3) hex value. [edit] Example The following example adds a piece of Slash All materia (ID: 0xE) using the following parameters: Materia ID retrieved from memory bank 6, address 1D; 16^1 set explicitly with a constant value; 16^2 set explicitly with a constant value; 16^3 retrieved from memory bank 6, address 1B. SETWORD(60,1B,1,0) SETWORD(60,1D,E,0) SMTRA(60,06,1D,3,2,1B) This equates to: (3*16^1) + (2*16^2) + (1*16^3) == 0x010203 == 66051 AP.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "T Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "AP1 Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "AP2 Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "AP3 Bank"
			},
			{
				"name": "T",
				"size": "Bytewise(Int8ul)",
				"description": "Type of materia to add, or source address 1."
			},
			{
				"name": "AP1",
				"size": "Bytewise(Int8ul)",
				"description": "Lowest unit (16^1) of AP amount the newly added materia will have, or source address 2"
			},
			{
				"name": "AP2",
				"size": "Bytewise(Int8ul)",
				"description": "Middle unit (16^2) of AP amount the newly added materia will have, or source address 3"
			},
			{
				"name": "AP3",
				"size": "Bytewise(Int8ul)",
				"description": "Highest unit (16^3) of AP amount the newly added materia will have, or source address 3"
			}
		]
	},
	{
		"id": 92,
		"name": "DMTRA",
		"longname": "Delete Materia",
		"description": "This opcode does not appear to function correctly in the PC version of the game. In addition, it is only used once, in the Debug Rooms.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "T Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "AP1 Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "AP2 Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "AP3 Bank"
			},
			{
				"name": "T",
				"size": "Bytewise(Int8ul)",
				"description": "Type of materia to add, or source address 1."
			},
			{
				"name": "AP1",
				"size": "Bytewise(Int8ul)",
				"description": "Lowest unit (16^1) of AP amount the newly added materia will have, or source address 2"
			},
			{
				"name": "AP2",
				"size": "Bytewise(Int8ul)",
				"description": "Middle unit (16^2) of AP amount the newly added materia will have, or source address 3"
			},
			{
				"name": "AP3",
				"size": "Bytewise(Int8ul)",
				"description": "Highest unit (16^3) of AP amount the newly added materia will have, or source address 3"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Amount to delete."
			}
		]
	},
	{
		"id": 93,
		"name": "CMTRA",
		"longname": "Check Materia",
		"description": "Places the amount of materia with specified type and AP into the bank and address specified. [edit] Important Note This opcode is not implemented in the PC version of the game, nor used in the PlayStation version.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "T Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "AP1 Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "AP2 Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "AP3 Bank"
			},
			{
				"name": "B5",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "T",
				"size": "Bytewise(Int8ul)",
				"description": "Type of materia to add, or source address 1."
			},
			{
				"name": "AP1",
				"size": "Bytewise(Int8ul)",
				"description": "Lowest unit (16^1) of AP amount the newly added materia will have, or source address 2"
			},
			{
				"name": "AP2",
				"size": "Bytewise(Int8ul)",
				"description": "Middle unit (16^2) of AP amount the newly added materia will have, or source address 3"
			},
			{
				"name": "AP3",
				"size": "Bytewise(Int8ul)",
				"description": "Highest unit (16^3) of AP amount the newly added materia will have, or source address 3"
			},
			{
				"name": "U",
				"size": "Bytewise(Int8ul)",
				"description": "Unknown"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Amount to delete."
			}
		]
	},
	{
		"id": 94,
		"name": "SHAKE",
		"longname": null,
		"description": null
	},
	{
		"id": 95,
		"name": "NOP",
		"longname": "No Op",
		"description": "Performs no operation."
	},
	{
		"id": 96,
		"name": "MAPJUMP",
		"longname": "Change Field",
		"description": "Switches fields to the one indicated by I, and places the character at the coordinates and direction specified. This is an alternative to using a gateway, and can complement their usage as it allows for more than 12 gateways by simulating their behaviour through a LINE which, when crossed, executes a MAPJUMP.",
		"operands": [
			{
				"name": "I",
				"size": "Bytewise(Int16ul)",
				"description": "Field ID of the map to jump to."
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate of the player on the next field."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate of the player on the next field."
			},
			{
				"name": "Z",
				"size": "Bytewise(Int16ul)",
				"description": "Z-coordinate of the player on the next field."
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Direction the character will be facing on the next field, in the standard game format."
			}
		]
	},
	{
		"id": 97,
		"name": "SCRLO",
		"longname": null,
		"description": null
	},
	{
		"id": 98,
		"name": "SCRLC",
		"longname": null,
		"description": null
	},
	{
		"id": 99,
		"name": "SCRLA",
		"longname": "Scroll To Entity",
		"description": "Scrolls the current view so that the field object associated with entity E is in the center of the view. The scroll occurs at speed S, and with a particular style, T. If an entity is given that does not have a field object, the view centers on the walkmesh origin. If the object is moving as the scroll occurs, the scroll will follow the object until it is centered. Also of note is that the scroll will not leave the boundaries of the background (as defined by the range values in section 8), unlike the standard \"scroll to coordinate\" opcodes.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Bank for the scroll speed, or zero if it is specified as a literal value."
			},
			{
				"name": "S",
				"size": "Bytewise(Int16ul)",
				"description": "Speed of the scroll, in frames, or the address to find the speed if B is non-zero."
			},
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Entity ID to scroll to."
			},
			{
				"name": "T",
				"size": "Bytewise(Int8ul)",
				"description": "Type of scroll ID Scroll Type 0 No Scroll 1 Instantaneous 2 Linear 3 Smooth"
			}
		]
	},
	{
		"id": 100,
		"name": "SCR2D",
		"longname": "Scroll 2D",
		"description": "Instantaneously scrolls the current view to the coordinates found in the arguments (or the values found at the addresses if memory banks and address are specified). The move to the new coordinates is instant; variants exist for linear and smooth scrolling.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate to scroll to, or address to find X if B1 is non-zero."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate to scroll to, or address to find Y if B2 is non-zero."
			}
		]
	},
	{
		"id": 101,
		"name": "SCRCC",
		"longname": "Scroll To Playable Character",
		"description": "Instantaneously scrolls the current view so that it is centered on the current playable character."
	},
	{
		"id": 102,
		"name": "SCR2DC",
		"longname": "Scroll to Coordinates (Smooth)",
		"description": "Similar to SCR2D, except the scroll is not instantaneous and is performed smoothly, with a slower start and ending, with speed peaking in the center of the scroll. The overall speed can be set with S.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "S Bank"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate to scroll to."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate to scroll to."
			},
			{
				"name": "S",
				"size": "Bytewise(Int16ul)",
				"description": "Speed to scroll; higher values scroll more slowly."
			}
		]
	},
	{
		"id": 103,
		"name": "SCRLW",
		"longname": "Wait for scroll",
		"description": "Halts execution of the current script for a preceding scroll to have reached its destination coordinates before continuing."
	},
	{
		"id": 104,
		"name": "SCR2DL",
		"longname": "Scroll to Coordinates (Linear)",
		"description": "Similar to SCR2D, except the scroll to the coordinates is linear; that is, the speed is constant throughout the duration of the screen scroll.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "S Bank"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate to scroll to."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate to scroll to."
			},
			{
				"name": "S",
				"size": "Bytewise(Int16ul)",
				"description": "Speed to scroll; higher values scroll more slowly."
			}
		]
	},
	{
		"id": 105,
		"name": "MPDSP",
		"longname": null,
		"description": null
	},
	{
		"id": 106,
		"name": "VWOFT",
		"longname": null,
		"description": null
	},
	{
		"id": 107,
		"name": "FADE",
		"longname": "Fade",
		"description": "Fades the screen to the colour specified, either as literal values or values from memory, using the type of fade specified by T. The speed of the fade is specified by S, but can also be adjusted based on the type of fade. If the fade type is a fade out (to the colour given), the adjustment ranges from a value of zero (fades at speed S), and a value of 0xFF (instant fade). If the fade type is a fade back (from fade colour back to the normal screen), these are reversed, and zero indicates an instant return, whilst 0xFF fades back at speed S.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "R Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "G Bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "B Bank"
			},
			{
				"name": "R",
				"size": "Bytewise(Int8ul)",
				"description": "Red component value, or address of red value if B1 is non-zero."
			},
			{
				"name": "G",
				"size": "Bytewise(Int8ul)",
				"description": "Green component value, or address of red value if B2 is non-zero."
			},
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Blue component value, or address of blue value if B4 is non-zero."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Speed of fade. Larger numbers indicate faster fades."
			},
			{
				"name": "T",
				"size": "Bytewise(Int8ul)",
				"description": "Type of fade; ID Fade Type 3 Black to Screen (Instant) 4 Screen to Black (Instant) 5 Colour Fade to Screen 6 Screen to Colour Fade"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Adjusts the speed of the fade, based on fade in/out."
			}
		]
	},
	{
		"id": 108,
		"name": "FADEW",
		"longname": "Wait for fade",
		"description": "Halts execution of the current script for a preceding FADE command, issued by any entity, to fully complete before continuing execution. If no FADE has been issued by any entity, or previous FADE calls have already completed, the FADEW call is ignored."
	},
	{
		"id": 109,
		"name": "IDLCK",
		"longname": "Triangle Boundary",
		"description": "Dynamically turns on or off the boundary status for the set of edges marked by the triangle ID I. If the boundary status is switched to on, the player will not be able to cross the edges of the triangle given. If switched to off, the player may walk freely through the same edges.",
		"operands": [
			{
				"name": "I",
				"size": "Bytewise(Int16ul)",
				"description": "Triangle ID"
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Switch boundary off/on (0/1, respectively)"
			}
		]
	},
	{
		"id": 110,
		"name": "LSTMP",
		"longname": "Last Map",
		"description": "Retrieves the field ID number of the field that was played directly before the current one, into the bank B and address A specified. The previous area does not include the specific world map locations that are given a field ID (0x1 to 0x40), so traversing via a gateway to the world map, then back to the field, will not cause the world map ID to be retrieved; rather, that same field ID will be loaded.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store value"
			}
		]
	},
	{
		"id": 111,
		"name": "SCRLP",
		"longname": "Scroll To Party Member",
		"description": "Similar to SCRLA, except the scroll moves towards the given party member, rather than a particular entity.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Bank for the scroll speed, or zero if it is specified as a literal value."
			},
			{
				"name": "S",
				"size": "Bytewise(Int16ul)",
				"description": "Speed of the scroll, in frames, or the address to find the speed if B is non-zero."
			},
			{
				"name": "P",
				"size": "Bytewise(Int8ul)",
				"description": "Party ID to scroll to, between 0 and 2."
			},
			{
				"name": "T",
				"size": "Bytewise(Int8ul)",
				"description": "Type of scroll ID Scroll Type 0 No Scroll 1 Instantaneous 2 Linear 3 Smooth"
			}
		]
	},
	{
		"id": 112,
		"name": "BATTLE",
		"longname": "Start Battle",
		"description": "This launches the battle module with whatever battle number is used in the argument, or the value retrieved from memory location N if B is non-zero. Battle 1, 2, and 999 (0x03E7) are debug battles.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Bank (16-bit) to retrieve the address of the battle ID, or zero if it is given as a literal value."
			},
			{
				"name": "N",
				"size": "Bytewise(Int16ul)",
				"description": "Battle ID, or address to find ID if B is non-zero."
			}
		]
	},
	{
		"id": 113,
		"name": "BTLON",
		"longname": "Battle Switch",
		"description": "Turns random encounters on or off for this field. Note that if a field does not have any Encounter Data set in its field file, battles will not occur regardless of the argument passed with this opcode.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Switch battles on/off (0/1, respectively)."
			}
		]
	},
	{
		"id": 114,
		"name": "BTLMD",
		"longname": "Battle Mode",
		"description": "Sets properties for the battle module. The argument is a bit field with bits that can be ORd together to set multiple battle properties.",
		"operands": [
			{
				"name": "MSB",
				"size": "Bytewise(Int8ul)",
				"description": "First Byte (MSB) Bit Description (Bit set to 1) 0x80 (10000000) Do not display the AP/EXP/Gil/items received screens. 0x40 (01000000) Activates the battle arena. The next chosen BATTLE instead takes place in the arena, but keeping the same enemy formation. The \"keep going/no way\" interface is enabled. 0x20 (00100000) Do not play the battle victory music. 0x08 (00001000) The party cannot escape the battle. 0x04 (00000100) Pre-emptive attack. 0x02 (00000010) The battle is timed; the player must complete the battle before the timer reaches zero, or the battle exits, with no AP/EXP/Gil/items received screens displayed."
			},
			{
				"name": "B2",
				"size": "Bytewise(Int8ul)",
				"description": "Second Byte Bit Description (Bit set to 1) 0x01 (00000001) Disable game over. After a party defeat, the game returns to the previous field."
			}
		]
	},
	{
		"id": 115,
		"name": "PGTDR",
		"longname": "Get Party Member Direction",
		"description": "Fetches the orientation of the party member specified by P on the field, into the bank and address specified by B and D.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Bank to store direction"
			},
			{
				"name": "P",
				"size": "Bytewise(Int8ul)",
				"description": "Party member ID, from 0 to 2."
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store direction."
			}
		]
	},
	{
		"id": 116,
		"name": "GETPC",
		"longname": "Get Party Character",
		"description": "Gets the standard Character ID for the party member, referenced by C. This value is between 0 and 2; 0 for the party member at the top of the list, 1 for the member in the middle, and 2 for the member in the bottom slot, as found in the main menu. The character ID is then placed at the specified bank and address.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Bank to store the value"
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Character offset in the party whose value should be retrieved."
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store the value"
			}
		]
	},
	{
		"id": 117,
		"name": "PXYZI",
		"longname": "Party Member Get Position",
		"description": "Retrieves the coordinates of the party member specified by P. If an invalid party member ID is specified, zeros are stored in the four addresses.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "Z Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "I Bank"
			},
			{
				"name": "P",
				"size": "Bytewise(Int8ul)",
				"description": "Party member to retrieve data from; range is 0 to 2."
			},
			{
				"name": "X",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store the X-coordinate of the party member"
			},
			{
				"name": "Y",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store the Y-coordinate of the party member."
			},
			{
				"name": "Z",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store the Z-coordinate of the party member."
			},
			{
				"name": "I",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store the ID of the walkmesh triangle the party member is standing on."
			}
		]
	},
	{
		"id": 118,
		"name": "PLUS!",
		"longname": "Saturated Addition (8-bit)",
		"description": "Adds two numbers together and stores the result back into D. The result of the addition is capped at 255. If the Source Bank is 0 then the O is added to the destination value. If the Source Bank is an 8 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 119,
		"name": "PLUS2!",
		"longname": "Saturated Addition (16-bit)",
		"description": "Adds two numbers together and stores the result back into D The result of the addition is capped at 32767. The result is not capped at the negative end, however (-32768), so adding two large negative numbers together will still produce wrap-around. If the Source Bank is 0 then the O is added to the destination value. If the Source Bank is an 16 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int16ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 120,
		"name": "MINUS!",
		"longname": "Saturated Subtraction (8-bit)",
		"description": "Subtracts O from D and stores the result back into D. The result of the subtraction is capped at 0. If the Source Bank is 0 then the O is subtracted from the destination value. If the Source Bank is an 8 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 121,
		"name": "MINUS2!",
		"longname": "Saturated Subtraction (16-bit)",
		"description": "Subtracts O from D and stores the result back into D. The result of the subtraction is capped at -32768. The result is not capped at the positive end (32767), so subtracting a large negative number from a large positive number will still produce wrap-around. If the Source Bank is 0 then the O is subtracted from the destination value. If the Source Bank is an 16 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int16ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 122,
		"name": "INC!",
		"longname": "Saturated Increment (8-bit)",
		"description": "Increments the value in D by 1. The result is capped at 255.",
		"operands": [
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "The destination address in the bank where the variable is incremented."
			}
		]
	},
	{
		"id": 123,
		"name": "INC2!",
		"longname": "Saturated Increment (16-bit)",
		"description": "Increments the value in D by 1. The result is capped at 32767.",
		"operands": [
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "The destination address in the bank where the variable is incremented."
			}
		]
	},
	{
		"id": 124,
		"name": "DEC!",
		"longname": "Saturated Decrement (8-bit)",
		"description": "Decreases the value in D by 1. The result is capped at 0.",
		"operands": [
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "The destination address in the bank where the variable is decremented."
			}
		]
	},
	{
		"id": 125,
		"name": "DEC2!",
		"longname": "Saturated Decrement (16-bit)",
		"description": "Decreases the value in D by 1. The result is capped at -32768.",
		"operands": [
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "The destination address in the bank where the variable is decremented."
			}
		]
	},
	{
		"id": 126,
		"name": "TLKON",
		"longname": "Talk Switch",
		"description": "Turns on or off, for an entity, the ability for the playable character to interact with the entity by pressing the [X] button. More precisely, this enables or disables the On Press script (script 2); if set to off, script 2 will not execute when the button is pressed and the player is facing the entity's object. If set to on, the script will execute, as normal.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Switch on/off (0/1, respectively)."
			}
		]
	},
	{
		"id": 127,
		"name": "RDMSD",
		"longname": "Seed Random Generator",
		"description": "Seeds the random number generator used by RANDOM. The lower four bits of the arguments are used as the seed value by altering the offset used to take a value from the table of pseudo-random numbers.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "S Bank"
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Seed for the random generator, or address for the seed if B is non-zero."
			}
		]
	},
	{
		"id": 128,
		"name": "SETBYTE",
		"longname": "Byte Set",
		"description": "Writes the byte value from the source address, or the value argument itself, into the destination 8-bit bank. If the source bank S is zero, the value given by V is written directly into the destination address; otherwise, the value is retrieved from the source bank/address S/V, and then written to the destination bank/address D/A. If the destination is a 16-bit bank, the high byte of the destination will remain unchanged.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "V Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "V",
				"size": "Bytewise(Int8ul)",
				"description": "Value to be written/Source address."
			}
		]
	},
	{
		"id": 129,
		"name": "SETWORD",
		"longname": "Word Set",
		"description": "Writes the word value from the source address, or the value argument itself, into the destination 16-bit bank. If the source bank S is zero, the value given by V is written directly into the destination bank/address; otherwise, the value is retrieved from the source bank/address S/V, and then written to the destination bank/address D/A. If the destination is a 8-bit bank, only the low byte of the source will be written into it.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "V Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "V",
				"size": "Bytewise(Int16ul)",
				"description": " Value to be written/Source address."
			}
		]
	},
	{
		"id": 130,
		"name": "BITON",
		"longname": "Set Bit",
		"description": "Sets the nth bit in the D location, where n is a number between 0-7 supplied in B. A value of zero in B will set the least significant bit. If the Source Bank is 0 then the bit to be set is taken from B. If the Source Bank is an 8 bit bank, then the “Bit” is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "B Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "The number of the bit to turn on."
			}
		]
	},
	{
		"id": 131,
		"name": "BITOFF",
		"longname": "Reset Bit",
		"description": "Sets the nth bit in the D location, where n is a number between 0-7 supplied in B. A value of zero in B will reset the least significant bit. If the Source Bank is 0 then the bit to be set is taken from B. If the Source Bank is an 8 bit bank, then the “Bit” is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "B Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "The number of the bit to turn off."
			}
		]
	},
	{
		"id": 132,
		"name": "BITXOR",
		"longname": "Toggle Bit",
		"description": "Toggles the nth bit in the D location, where n is a number between 0-7 supplied in B. A value of zero in B will toggle the least significant bit. If the Source Bank is 0 then the bit to be changed is taken from B. If the Source Bank is an 8 bit bank, then the “Bit” is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "B Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "The number of the bit to turn toggle."
			}
		]
	},
	{
		"id": 133,
		"name": "PLUS",
		"longname": "Addition (8-bit)",
		"description": "Adds two numbers together and stores the result back into D. The result of the addition wraps around into the range of 0-255. If the Source Bank is 0 then the O is added to the destination value. If the Source Bank is an 8 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 134,
		"name": "PLUS2",
		"longname": "Addition (16-bit)",
		"description": "Adds two numbers together and stores the result back into D. The result of the addition wraps around into the 16-bit range. If the Source Bank is 0 then the O is added to the destination value. If the Source Bank is an 16 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int16ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 135,
		"name": "MINUS",
		"longname": "Subtraction (8-bit)",
		"description": "Subtracts two numbers and stores the result back into D. The result of the subtraction wraps around into the range of 0-255. If the Source Bank is 0 then the O is subtracted from the destination value. If the Source Bank is an 8 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 136,
		"name": "MINUS2",
		"longname": "Subtraction (16-bit)",
		"description": "Subtracts two numbers and stores the result back into D. The result of the subtraction wraps around into the 16-bit range. If the Source Bank is 0 then the O is subtracted from the destination value. If the Source Bank is an 16 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int16ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 137,
		"name": "MUL",
		"longname": "Multiplication (8-bit)",
		"description": "Multiplies two numbers together and stores the result back into D. The result of the Multiplication is capped at 255. If the Source Bank is 0 then the the value O is multiplied with the destination value. If the Source Bank is an 8 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 138,
		"name": "MUL2",
		"longname": "Multiplication (16-bit)",
		"description": "Multiplies two numbers together and stores the result back into D. The result of the Multiplication is capped at 32767. If the Source Bank is 0 then the the value O is multiplied with the destination value. If the Source Bank is an 8 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int16ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 139,
		"name": "DIV",
		"longname": "Division (8-bit)",
		"description": "Divides D by O and stores the result back into D. The result of the division is rounded towards zero to the nearest integer. If the Source Bank is 0 then the O is the denominator. If the Source Bank is an 8 bit bank, then the O is the address in that bank where the denominator is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 140,
		"name": "DIV2",
		"longname": "Division (16-bit)",
		"description": "Divides D by O and stores the result back into D. The result of the division is rounded towards negative infinity to the nearest integer. If the Source Bank is 0 then the O is the denominator. If the Source Bank is an 16 bit bank, then the O is the address in that bank where the denominator is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int16ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 141,
		"name": "MOD",
		"longname": "Modulus (8-bit)",
		"description": "Divides D by O and stores the remainder back into D. If the Source Bank is 0 then the O is the denominator. If the Source Bank is an 8 bit bank, then the O is the address in that bank where the denominator is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 142,
		"name": "MOD2",
		"longname": "Modulus (16-bit)",
		"description": "Divides D by O and stores the remainder back into D. If the Source Bank is 0 then the O is the denominator. If the Source Bank is an 16 bit bank, then the O is the address in that bank where the denominator is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int16ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 143,
		"name": "AND",
		"longname": "Bitwise AND (8-bit)",
		"description": "Performs a bitwise AND operation between D and O and stores the result back into D. If the Source Bank is 0 then the O is the operand to AND with. If the Source Bank is an 8 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 144,
		"name": "AND2",
		"longname": "Bitwise AND (16-bit)",
		"description": "Performs a bitwise AND operation between D and O and stores the result back into Dest. If the Source Bank is 0 then the O is the operand to AND with. If the Source Bank is a 16-bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int16ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 145,
		"name": "OR",
		"longname": "Bitwise OR (8-bit)",
		"description": "Performs a bitwise OR operation between D and O and stores the result back into D. If the Source Bank is 0 then the O is the operand to OR with. If the Source Bank is an 8 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 146,
		"name": "OR2",
		"longname": "Bitwise OR (16-bit)",
		"description": "Performs a bitwise OR operation between D and O and stores the result back into Dest. If the Source Bank is 0 then O is the operand to OR with. If the Source Bank is a 16-bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int16ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 147,
		"name": "XOR",
		"longname": "Bitwise XOR (8-bit)",
		"description": "Performs a bitwise XOR operation between D and O and stores the result back into D. If the Source Bank is 0 then the O is the operand to XOR with. If the Source Bank is an 8 bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 148,
		"name": "XOR2",
		"longname": "Bitwise XOR (16-bit)",
		"description": "Performs a bitwise XOR operation between D and O and stores the result back into Dest. If the Source Bank is 0 then O is the operand to OR with. If the Source Bank is a 16-bit bank, then the O is the address in that bank where the operand is.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "O bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "O",
				"size": "Bytewise(Int16ul)",
				"description": "Operand address"
			}
		]
	},
	{
		"id": 149,
		"name": "INC",
		"longname": "Increment (8-bit)",
		"description": "Increments the 8-bit value found at bank B, address A. If the value is 0xFF, it will roll over to 0x00. If you specify a 16-bit bank, only the lower byte will be incremented, and if the lower byte is 0xFF, the higher byte will be unaffected whilst the lower byte will return to 0x00.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address"
			}
		]
	},
	{
		"id": 150,
		"name": "INC2",
		"longname": "Increment (16-bit)",
		"description": "Increments the 16-bit value found at bank B, address A. If the value is 0xFFFF, it will roll over to 0x0000.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address"
			}
		]
	},
	{
		"id": 151,
		"name": "DEC",
		"longname": "Decrement (8-bit)",
		"description": "Decrements the 8-bit value found at bank B, address A. If the value is 0x00, it will roll over to 0xFF. If you specify a 16-bit bank, only the lower byte will be decremented, and if the lower byte is 0x00, the higher byte will be unaffected whilst the lower byte will return to 0xFF.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address"
			}
		]
	},
	{
		"id": 152,
		"name": "DEC2",
		"longname": "Decrement (16-bit)",
		"description": "Decrements the 16-bit value found at bank B, address A. If the value is 0x0000, it will roll over to 0xFFFF.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address"
			}
		]
	},
	{
		"id": 153,
		"name": "RANDOM",
		"longname": "Random",
		"description": "Places a random 8-bit value into the destination bank and address specified. If you specify a 16-bit bank, only the lower byte is randomised.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address"
			}
		]
	},
	{
		"id": 154,
		"name": "LBYTE",
		"longname": "Low Byte",
		"description": "Retrieves the low byte of a two-byte word from the source bank and address, and places the byte value into the destination bank and address. If the source is an 8-bit bank, this will simply copy the value from source to destination; if the destination is a 16-bit bank, the high byte of the destination will remain unchanged.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "S bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Source address"
			}
		]
	},
	{
		"id": 155,
		"name": "HBYTE",
		"longname": "High Byte",
		"description": "Retrieves the high byte of a two-byte word from the source bank and address, and places the byte value into the destination bank and address. If the source bank is zero, then the final two arguments are actually a given two-byte word value, and the high byte value is retrieved from this word instead of from a memory address.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "S bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "S",
				"size": "Bytewise(Int16ul)",
				"description": "Source address"
			}
		]
	},
	{
		"id": 156,
		"name": "2BYTE",
		"longname": "Two Byte Value",
		"description": "Constructs and stores a two-byte value from two seperate one-byte values. The low and high bytes of the two-byte word may be taken from existing values from memory, or specified as a value (or both).",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "D bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "L bank"
			},
			{
				"name": "B3",
				"size": "Bytewise(Int8ul)",
				"description": "H bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination address"
			},
			{
				"name": "L",
				"size": "Bytewise(Int8ul)",
				"description": "Low byte, or address to retrieve value if B2 is non-zero."
			},
			{
				"name": "H",
				"size": "Bytewise(Int8ul)",
				"description": "High byte, or address to retrieve value if B3 is non-zero."
			}
		]
	},
	{
		"id": 157,
		"name": "SETX",
		"longname": null,
		"description": null
	},
	{
		"id": 158,
		"name": "GETX",
		"longname": null,
		"description": null
	},
	{
		"id": 159,
		"name": "SEARCHX",
		"longname": "Search into var map",
		"description": "Search the value V between Ofst + Start and Ofst + End in the bank B1 and store the position in R if found, or -1 of not.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "Source bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Start bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "End bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "V bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B6",
				"size": "BitsInteger(4)",
				"description": "R bank"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Offset"
			},
			{
				"name": "Start",
				"size": "Bytewise(Int16ul)",
				"description": "Start offset."
			},
			{
				"name": "End",
				"size": "Bytewise(Int16ul)",
				"description": "End offset."
			},
			{
				"name": "V",
				"size": "Bytewise(Int8ul)",
				"description": "Value to search."
			},
			{
				"name": "R",
				"size": "Bytewise(Int8ul)",
				"description": "Result adress."
			}
		]
	},
	{
		"id": 160,
		"name": "PC",
		"longname": "Playable Character",
		"description": "Defines the entity in which this script resides as a playable character. The entity then becomes associated with the character ID C, including the entity's visible object, animation set, and scripts. For example, creating a visible entity and inserting PC(0) into its initialisation script will associate this entity with character ID 0.",
		"operands": [
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID"
			}
		]
	},
	{
		"id": 161,
		"name": "CHAR",
		"longname": "Character definition",
		"description": "Defines a character, or rather, a visible entity. This means that the entity executing this opcode can be associated with a field object, and thus displayed on the walkmesh, as defined in Section 3. Note that the character ID does not provide an index into the field object array as you might expect. Infact, the field object that this CHARacter will use is related solely to the position of this entity amongst the other visible entities in the set. For example, if you have the following entities and objects loaded: Ent1 (Visible, CHAR (00)) Ent2 (Visible, CHAR (01)) Ent3 (Visible, CHAR (02)) Ent4 FObject1 FObject2 FObject3 Ent1 will be associated with FObject 1, Ent2 with FObject 2, and Ent3 with FObject3. If you were to edit as such: Ent1 (Visible, CHAR (60)) Ent2 (Visible, CHAR (12)) Ent3 Ent4 (Visible, CHAR (FF)) FObject1 FObject2 FObject3 Ent1 will be associated with FObject 1, Ent2 with FObject 2, and Ent4 with FObject3. As you can see, the argument provides no information as to which object to use. Simply put, as each CHAR entity is read, the next sequential field object in the loader is assigned to it.",
		"operands": [
			{
				"name": "N",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID."
			}
		]
	},
	{
		"id": 162,
		"name": "DFANM",
		"longname": "Animate, Loop",
		"description": "Plays the animation given by A at the speed S. The animation loops (plays, completes, then rewinds and plays again) until another animation is played, either using any animation opcode, or an opcode indirectly changes the animation being played, such as MOVE.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Animation ID for this entity's field object."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Speed the animation is played at. Higher numbers indicate slower animations."
			}
		]
	},
	{
		"id": 163,
		"name": "ANIME1",
		"longname": "Wait While Animate/Return",
		"description": "Plays the animation found at ID A in this entity's field object, at the speed marked by S. When the animation is completed, the field object returns to its original state. The current script's execution is halted whilst the animation is played, and continues when the animation has completed.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Animation ID for this entity's field object."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Speed the animation is played at. Real model animation speed divide by this to calculate real play speed."
			}
		]
	},
	{
		"id": 164,
		"name": "VISI",
		"longname": "Visibility",
		"description": "Sets whether this entity's field object is visible.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Switch on/off (1/0, respectively)."
			}
		]
	},
	{
		"id": 165,
		"name": "XYZI",
		"longname": "Place Object",
		"description": "Places the field object for this entity on the walkmesh at the coordinates given. This variant of object placement allows the Z-coordinate of the object to be specified, as well as the ID of the walkmesh triangle on which the object is being placed.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "Z Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "I Bank"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate of the field object, or address of X-coordinate if B1 is non-zero."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate of the field object, or address of Y-coordinate if B2 is non-zero."
			},
			{
				"name": "Z",
				"size": "Bytewise(Int16ul)",
				"description": "Z-coordinate of the field object, or address of Z-coordinate if B3 is non-zero."
			},
			{
				"name": "I",
				"size": "Bytewise(Int16ul)",
				"description": "ID of the walkmesh triangle, or address of value if B4 is non-zero."
			}
		]
	},
	{
		"id": 166,
		"name": "XYI",
		"longname": "Place Object (No Z)",
		"description": "Similar to XYZI, but does not specify a Z-coordinate. This lack of Z-coordinate may be a problem when placing the object on a mesh that has multiple Z-levels on the same X- and Y-coordinates.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "I Bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate of the field object, or address of X-coordinate if B1 is non-zero."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate of the field object, or address of Y-coordinate if B2 is non-zero."
			},
			{
				"name": "I",
				"size": "Bytewise(Int16ul)",
				"description": "Triangle ID, or address of ID if B3 is non-zero."
			}
		]
	},
	{
		"id": 167,
		"name": "XYZ",
		"longname": "Place Object (No I)",
		"description": "Similar to XYZI, but does not specify a triangle ID. This lack of triangle ID may cause problems if the field object is set to move from its set position.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "Z Bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate of the field object, or address of X-coordinate if B1 is non-zero."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate of the field object, or address of Y-coordinate if B2 is non-zero."
			},
			{
				"name": "Z",
				"size": "Bytewise(Int16ul)",
				"description": "Z-coordinate of the field object, or address of Z-coordinate if B3 is non-zero."
			}
		]
	},
	{
		"id": 168,
		"name": "MOVE",
		"longname": "Move Object",
		"description": "Makes the field object, associated with the entity this opcode's script resides in, walk (or move gradually) to the point specified by the coordinates, at the speed previously specified by MSPED. The object's standard walk animation is used, found with animation ID 1 in the field object associated with this entity.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate, or lower byte specifying an address for the value if B1 is non-zero."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate, or lower byte specifying an address for the value if B2 is non-zero."
			}
		]
	},
	{
		"id": 169,
		"name": "CMOVE",
		"longname": "Move Object (No Animation)",
		"description": "Similar to MOVE, but the field object won't play its animation whilst it moves. Field object will not be rotated according to movement (it will move without changing direction).",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate, or lower byte specifying an address for the value if B1 is non-zero."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate, or lower byte specifying an address for the value if B2 is non-zero."
			}
		]
	},
	{
		"id": 170,
		"name": "MOVA",
		"longname": "Move to Entity",
		"description": "Moves the field object towards the entity with the given ID. Note that this is not a field object ID, in that the entity ID includes non-visible entities; in other words, this is an offset to an entity in the entire entity list, not just the visible entity list. However, attempting to move the field object to an entity that is not visible will fail, in that the MOVA opcode is ignored.",
		"operands": [
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Entity ID to move towards."
			}
		]
	},
	{
		"id": 171,
		"name": "TURA",
		"longname": "Turn to entity",
		"description": "Rotation calculated line in TUGNGEN, except end direction calculated during first opcode call. Rotation always calculated smoothly. Like in TURNGEN(XX,XX,XX,XX,02); This opcode will be called until turn is over and then continue script execution.",
		"operands": [
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Entity ID to rotate towards,"
			},
			{
				"name": "R",
				"size": "Bytewise(Int16ul)",
				"description": "Specify how model will be rotated. (0 - clockwise/ 1 - anti-clockwise/ 2 - closest)"
			},
			{
				"name": "S",
				"size": "Bytewise(Int16ul)",
				"description": "Set number of steps in rotation."
			}
		]
	},
	{
		"id": 172,
		"name": "ANIMW",
		"longname": "Wait for Animation",
		"description": "Waits for the animation to complete that has been previously played using any of the animation opcodes."
	},
	{
		"id": 173,
		"name": "FMOVE",
		"longname": "Move Object (No Animation)",
		"description": "Similar to MOVE, but the field object won't play its animation whilst it moves. Field object will be rotated according to movement.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate, or lower byte specifying an address for the value if B1 is non-zero."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate, or lower byte specifying an address for the value if B2 is non-zero."
			}
		]
	},
	{
		"id": 174,
		"name": "ANIME2",
		"longname": "Animate/Return",
		"description": "Similarly to ANIME1, the animation specified by A is played at speed S for the current entity's field object. However, in contrast, the current script's execution is not halted whilst the animation is played.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Animation ID for this entity's field object."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Speed the animation is played at. Real model animation speed divide by this to calculate real play speed."
			}
		]
	},
	{
		"id": 175,
		"name": "ANIM!1",
		"longname": "Wait While Animate/Stay",
		"description": "Similarly to ANIME1, ANIM!1 plays the animation found at ID A in this entity's field object, at the speed marked by S. However, when the animation is completed, the field object stays posed in the last frame of the animation. Script execution is not halted whilst the animation plays.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Animation ID for this entity's field object."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Speed the animation is played at. Higher numbers indicate slower animations."
			}
		]
	},
	{
		"id": 176,
		"name": "CANIM1",
		"longname": "Particial Animation",
		"description": "Exactly the same as ANIME2, but allow set first and last frame of given animation.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Animation ID for this entity's field object."
			},
			{
				"name": "F",
				"size": "Bytewise(Int8ul)",
				"description": "First frame of animation."
			},
			{
				"name": "L",
				"size": "Bytewise(Int8ul)",
				"description": "Last frame of animation."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Relative speed of animation. Real model animation speed divide by this to calculate real play speed."
			}
		]
	},
	{
		"id": 177,
		"name": "CANM!1",
		"longname": "Particial Animation",
		"description": "Exactly the same as ANIM!1, but allow set first and last frame of given animation.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Animation ID for this entity's field object."
			},
			{
				"name": "F",
				"size": "Bytewise(Int8ul)",
				"description": "First frame of animation."
			},
			{
				"name": "L",
				"size": "Bytewise(Int8ul)",
				"description": "Last frame of animation."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Relative speed of animation. Real model animation speed divide by this to calculate real play speed."
			}
		]
	},
	{
		"id": 178,
		"name": "MSPED",
		"longname": "Movement Speed (16-bit)",
		"description": "Set speed of movement for MOVE-type opcodes.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "S Bank"
			},
			{
				"name": "S",
				"size": "Bytewise(Int16ul)",
				"description": "Speed value (8-bit fixed point)."
			}
		]
	},
	{
		"id": 179,
		"name": "DIR",
		"longname": "Direction",
		"description": "Instantaneously turns the field object for this entity to the direction specified by D. The direction is in the standard direction format for the game.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "D bank"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Direction to face, or address if B is non-zero."
			}
		]
	},
	{
		"id": 180,
		"name": "TURNGEN",
		"longname": "Generate Turn",
		"description": "This opcode will be called until turn is over and then continue script execution.",
		"operands": [
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "R Bank"
			},
			{
				"name": "R",
				"size": "Bytewise(Int8ul)",
				"description": "Rotation value to which model will be rotated."
			},
			{
				"name": "T",
				"size": "Bytewise(Int8ul)",
				"description": "Specify how model will be rotated. (0 - clockwise/ 1 - anti-clockwise/ 2 - closest)"
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Set number of steps in rotation."
			},
			{
				"name": "TS",
				"size": "Bytewise(Int8ul)",
				"description": "Specify how to calculate rotation step by step. (1 - linear/ 2 - smooth.)."
			}
		]
	},
	{
		"id": 181,
		"name": "TURN",
		"longname": "Generate Turn",
		"description": "This is deprecated opcode, only 4 field in game use it. This opcode do turn the same way as TURNGEN, but go to specify direction without modification. So if current direction is 0 (top) and target direction is 255 (top left) it will rotate all way clockwise and you can't do anything about 0 direction. This opcode will be called until turn is over and then continue script execution.",
		"operands": [
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "R Bank"
			}
		]
	},
	{
		"id": 182,
		"name": "DIRA",
		"longname": "Direction to Entity",
		"description": "Instantaneously directs the field object towards the entity with the given ID. As with MOVA, the entity ID is an offset in the entire entity list, and not into the visible object/entities list, and will also have no effect if a non-visible entity is given.",
		"operands": [
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Entity ID to direct towards."
			}
		]
	},
	{
		"id": 183,
		"name": "GETDIR",
		"longname": "Get Entity Direction",
		"description": "Fetches the direction of the entity given by E into bank B, address A. E is an offset into the entity list, not a visible object ID, and therefore includes non-visible entities; retrieving the direction of a non-visible entity results in unusual values being retrieved.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Entity ID"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store direction."
			}
		]
	},
	{
		"id": 184,
		"name": "GETAXY",
		"longname": "Get Entity XY",
		"description": "Fetches the current X- and Y-coordinates of the entity given by E into bank B, address A. E is an offset into the entity list, not a visible object ID, and therefore includes non-visible entities; retrieving the co-ordinates of a non-visible entity results in unusual values being retrieved.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Entity ID to retrieve."
			},
			{
				"name": "X",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store X-coordinate."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store Y-coordinate."
			}
		]
	},
	{
		"id": 185,
		"name": "GETAI",
		"longname": "Get Entity Triangle ID",
		"description": "Fetches the triangle ID on which the object of entity E is currently standing on, into bank B, address A. E is an offset into the entity list, not a visible object ID, and therefore includes non-visible entities; retrieving the triangle ID of a non-visible entity results in unusual values being retrieved.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Entity ID"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store triangle ID."
			}
		]
	},
	{
		"id": 186,
		"name": "ANIM!2",
		"longname": "Animate/Stay",
		"description": "Similarly to ANIME2, plays the animation found at ID A in this entity's field object, at the speed marked by S. However, in contrast, the field object stays posed in the last frame of the animation played. The current script's execution is halted whilst the animation is played, and continues when the animation has completed.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Animation ID for this entity's field object."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Speed the animation is played at. Higher numbers indicate slower animations."
			}
		]
	},
	{
		"id": 187,
		"name": "CANIM2",
		"longname": "Particial Animation",
		"description": "Exactly the same as ANIME1, but allow set first and last frame of given animation.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Animation ID for this entity's field object."
			},
			{
				"name": "F",
				"size": "Bytewise(Int8ul)",
				"description": "First frame of animation."
			},
			{
				"name": "L",
				"size": "Bytewise(Int8ul)",
				"description": "Last frame of animation."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Relative speed of animation. Real model animation speed divide by this to calculate real play speed."
			}
		]
	},
	{
		"id": 188,
		"name": "CANM!2",
		"longname": "Particial Animation",
		"description": "Exactly the same as ANIM!2, but allow set first and last frame of given animation.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Animation ID for this entity's field object."
			},
			{
				"name": "F",
				"size": "Bytewise(Int8ul)",
				"description": "First frame of animation."
			},
			{
				"name": "L",
				"size": "Bytewise(Int8ul)",
				"description": "Last frame of animation."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Relative speed of animation. Real model animation speed divide by this to calculate real play speed."
			}
		]
	},
	{
		"id": 189,
		"name": "ASPED",
		"longname": "Animation Speed",
		"description": "Set global model animation speed. Lager the value - faster all animation played by this model",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "S Bank"
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Speed of animation"
			}
		]
	},
	{
		"id": 190,
		"name": "(unused)",
		"longname": null,
		"description": null
	},
	{
		"id": 191,
		"name": "CC",
		"longname": "Character Control",
		"description": "Passes playable character control to the entity given. The screen will instantaneously center on the given entity's field object, and the player will then be able to control the given character around the walkmesh, and if currently set to be visible, the 'hand' pointer will hover above the specified entity's field object. The entity ID is an offset into the entire entity list, not a field object offset; attempting to pass control to a non-visible field object will have no effect.",
		"operands": [
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Entity ID"
			}
		]
	},
	{
		"id": 192,
		"name": "JUMP",
		"longname": "Jump",
		"description": "Causes the character to jump to the specified point and triangle ID, with the jump curve peaking at a height which is increased by using a larger value for the H argument. In addition, the larger the number, the longer the jump will take to complete. A \"normal\" value is around 0x15, 0x01 is fast and instantaneous; the argument must not be zero or the game will crash. Whilst this is an unsigned two-byte number, a large value (beyond around 0x60) will not only cause a vast jump height, but also cause the screen to scroll erratically (the larger the number, the more erratic). Main update function go through all entity with JUMP state and if stage is 0 it calculates final Z point according to triangle id. It sets current coords as start coords. The main thing this function does is set B coefficient for later calculation. It defines as follows: B = (Z_final - Z_start) / steps - steps * 1.45; Then it set current step to 0 and stage to 1. On next update other part of function works. It's calculate real position. First it increment current step number. Then it calculate X and Y. They change linear so nothing interesting here. Then here we go... Z calculation: Z_current = - step^2 * 1.45 + step * B + Z_start; If current substep equal number of steps then we set current triangle to final triangle and set stage to 2. Which finilize routine on next opcode call. Neither animation nor sound is specified in this opcode. An animation is played by using an animation opcode such as DFANM, and a SOUND played, before the jump.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "I Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "H Bank"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate of the target to jump to, or lower byte specifying address if B1 is non-zero."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate of the target to jump to, or lower byte specifying address if B2 is non-zero."
			},
			{
				"name": "I",
				"size": "Bytewise(Int16ul)",
				"description": "Triangle ID of the target to jump to, or lower byte specifying address if B3 is non-zero."
			},
			{
				"name": "H",
				"size": "Bytewise(Int16ul)",
				"description": "Steps in jump. Must be non-zero if a literal value. Alternatively, lower byte specifies address if B4 is non-zero."
			}
		]
	},
	{
		"id": 193,
		"name": "AXYZI",
		"longname": "Entity Get Position",
		"description": "Retrieves the coordinates of the field object that the entity, whose ID specified in A, is associated with. This opcode uses an entity ID, not a field object offset; as such, if an entity ID is given that does not have a field object, this opcode will store zero in each of the four address specified.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "Z Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "E",
				"size": "Bytewise(Int8ul)",
				"description": "Entity ID whose field object will have its position retrieved from."
			},
			{
				"name": "X",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store the X-coordinate of the entity's object."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store the Y-coordinate of the entity's object."
			},
			{
				"name": "Z",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store the Z-coordinate of the entity's object."
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store the ID of the walkmesh triangle the object is standing on."
			}
		]
	},
	{
		"id": 194,
		"name": "LADER",
		"longname": "Ladder",
		"description": "Causes the character to climb a ladder; that is, switching from standard walkmesh movement, to climbing along a line connecting two points on the walkmesh. If B1, B2, B3 or B4 is non-zero, then the value for that particular component is taken from memory using the corresponding bank and address specified, rather than as a literal value. Both retrieved values and literals can be used for different components. If using X, Y, Z or I as addresses, the lower byte should hold the address whilst the higher byte should be zero. The coordinates specify the end-point of the ladder; the current position of the character is used as the start point. The ID of the walkmesh triangle must be specified; this is the triangle the character will step onto after reaching the end point of the ladder. The K value specifies the keys used to move the character across the ladder; keys outside the range found in the table will cause unpredictable behaviour. The animation ID specifies an offset into the field object's animation list; this animation is played at the speed specified by S whilst the character climbs. Finally, the D argument is a direction value in the game's standard direction format, which orients the character on the ladder. Notes This opcode is used as part of the character's entity, rather than in a seperate entity, as with a LINE. A LINE is used to set the start point of the ladder on the walkmesh. When this LINE is crossed by the player, a script in the LINE then uses a PREQ (or one of its variants), calling the script in the party leader that defines the LADER, causing the character to switch to 'climbing mode'. To set up a two-way ladder, two LINEs are used at either end, with different values for the LADER arguments, such as differing end points. If this opcode is used as part of a non-playable character entity, the NPC object will automatically climb from the start to the end point without need for player interaction.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "Z Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "I Bank"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate of the end of the ladder, or address to find X-coordinate if B1 is non-zero."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate of the end of the ladder, or address to find Y-coordinate if B2 is non-zero."
			},
			{
				"name": "Z",
				"size": "Bytewise(Int16ul)",
				"description": "Z-coordinate of the end of the ladder, or address to find Z-coordinate if B3 is non-zero."
			},
			{
				"name": "I",
				"size": "Bytewise(Int16ul)",
				"description": "ID of the walkmesh triangle found at the end of the ladder, or address to find ID if B4 is non-zero."
			},
			{
				"name": "K",
				"size": "Bytewise(Int8ul)",
				"description": "The keys used to move the character on the ladder. ID Key: Towards the end point Key: Towards the start point 0 Down Up 1 Up Down 2 Right Left 3 Left Right"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Animation ID for the field object's movement animation."
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Direction the character faces when climbing the ladder."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Speed of the animation whilst climbing the ladder."
			}
		]
	},
	{
		"id": 195,
		"name": "OFST",
		"longname": "Offset Object",
		"description": "Offsets the field object, belonging to the entity whose script this opcode resides in, by a certain amount. After being offset, the character continues to be constrained in movement as defined by the walkmesh's shape, but at a certain distance away from the normal walkmesh position. Other field objects are unaffected, and their position or movements are maintained on the walkmesh's original position. If B1, B2, B3 or B4 is non-zero, then the value for that particular component is taken from memory using the corresponding bank and address specified, rather than as a literal value. Both retrieved values and literals can be used for different components. If using T, X, Y or S as addresses, the lower byte should hold the address whilst the higher byte should be zero. The amount to offset is specified relative to the current position. If Type is specified, the object moves gradually from its current point to the offset position; this can be used to simulate movements such as elevators. Any type outside the range in the table will cause the offset not to occur. If the object is set to move gradually, then the speed of offset can be set; the greater the number, the slower the object moves to its target offset. Script execution may also be halted until the gradual offset has been completed. For this, see OFSTW.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "X Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Y Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "Z Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "S Bank"
			},
			{
				"name": "T",
				"size": "Bytewise(Int8ul)",
				"description": "Type of movement. ID Movement Type 0 Instantaneous 1 Linear (Point-to-point) 2 Quadratic (Smoothed)"
			},
			{
				"name": "X",
				"size": "Bytewise(Int16ul)",
				"description": "X offset amount, relative to current position, or address to find X offset, if B1 is non-zero."
			},
			{
				"name": "Y",
				"size": "Bytewise(Int16ul)",
				"description": "Y offset amount, relative to current position, or address to find Y offset, if B2 is non-zero."
			},
			{
				"name": "Z",
				"size": "Bytewise(Int16ul)",
				"description": "Z offset amount, relative to current position, or address to find Z offset, if B3 is non-zero."
			},
			{
				"name": "S",
				"size": "Bytewise(Int16ul)",
				"description": "Speed of the offset movement, if type is non-zero, or address to find speed, if B4 is non-zero."
			}
		]
	},
	{
		"id": 196,
		"name": "OFSTW",
		"longname": "Wait for Offset",
		"description": "Halts current script execution until a previous OFST has completed. This is only of use if the offset type is not instantaneous."
	},
	{
		"id": 197,
		"name": "TALKR",
		"longname": "Talk Range",
		"description": "Increases the talk range (or rather, button range) for this field object. Larger values mean that the distance between the playable character and the field object in question is increased, so that the button press script for the object's field entity is activated by a button press that is further away than normal. For ranges larger than one byte, TLKR2 may be used.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "R Bank"
			},
			{
				"name": "R",
				"size": "Bytewise(Int8ul)",
				"description": "Range value"
			}
		]
	},
	{
		"id": 198,
		"name": "SLIDR",
		"longname": "Solid Range",
		"description": "Adjusts the range of the collision circle for the entity's field object, changing the distance threshold for collisions between the object, and both other objects and the walkmesh boundaries. Lower values produce a lower circle for the object; higher values increase the circle size.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "R Bank"
			},
			{
				"name": "R",
				"size": "Bytewise(Int8ul)",
				"description": "Range value"
			}
		]
	},
	{
		"id": 199,
		"name": "SOLID",
		"longname": "Solid object",
		"description": "Switches the solidity of the field object associated with this entity; that is, turns collision detection on or off. When off, the playable character will be able to walk through the entity's object, as if it were not there. This may be used for such objects as save points, where the character must be able to walk through the object to be able to access the save menu item.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Switch on/off (0/1, respectively)."
			}
		]
	},
	{
		"id": 200,
		"name": "PRTYP",
		"longname": "Party Add",
		"description": "Adds a character to the party, given by C. The character is added in the first given empty party slot (which can be set by PRTYE and an argument of FE for a slot). If there are no party members, the newly added character is the leader; if there is only the leader in the party, the newly added character occupies the second slot; if there are two members, the character occupies the last remaining slot. If the opcode is used when there is already a full party (with three members), the newly added party member occupies the last slot, overwriting the party member already there.",
		"operands": [
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID to add."
			}
		]
	},
	{
		"id": 201,
		"name": "PRTYM",
		"longname": "Party Remove",
		"description": "Moves the specified character out of your party, if they are currently in it to begin with. If not, this has no effect.",
		"operands": [
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID to remove ID Character 0 Cloud 1 Tifa 2 Barret 3 Aeris 4 Red XIII 5 Yuffie 6 Cait Sith 7 Cid 8 Vincent"
			}
		]
	},
	{
		"id": 202,
		"name": "PRTYE",
		"longname": "Party Change",
		"description": "Changes the current party to the characters specified by each of the three arguments, or leaves the party member blank if the ID is 0xFE. Note that the chocobo entry will crash during battle, and that Young Cloud and Sephiroth occupy the same 'slots' used by Vincent and Cait Sith's character entries.",
		"operands": [
			{
				"name": "C1",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID for first party character ID Character 0 Cloud 1 Barret 2 Tifa 3 Aeris 4 Red XIII 5 Yuffie 6 Cait Sith 7 Vincent 8 Cid 9 Young Cloud A Sephiroth B Chocobo FE No character"
			},
			{
				"name": "C2",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID for second party character ID Character 0 Cloud 1 Barret 2 Tifa 3 Aeris 4 Red XIII 5 Yuffie 6 Cait Sith 7 Vincent 8 Cid 9 Young Cloud A Sephiroth B Chocobo FE No character"
			},
			{
				"name": "C3",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID for third party character ID Character 0 Cloud 1 Barret 2 Tifa 3 Aeris 4 Red XIII 5 Yuffie 6 Cait Sith 7 Vincent 8 Cid 9 Young Cloud A Sephiroth B Chocobo FE No character"
			}
		]
	},
	{
		"id": 203,
		"name": "IFPRTYQ",
		"longname": "If Party Member",
		"description": "Checks whether the character, given as the first argument, is in the current party of three. If so, the script immediately following this opcode and argument list will execute; otherwise, the script pointer is advanced by the second argument and execution continues.",
		"operands": [
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID to check"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Amount to jump if comparison is false"
			}
		]
	},
	{
		"id": 204,
		"name": "IFMEMBQ",
		"longname": "If Party Member Available",
		"description": "Checks whether the character, given as the first argument, is globally enabled; that is, the character has been enabled using MMBud. If so, the script immediately following this opcode and argument list will execute; otherwise, the script pointer is advanced by the second argument and execution continues.",
		"operands": [
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID to check"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Amount to jump if comparison is false"
			}
		]
	},
	{
		"id": 205,
		"name": "MMBud",
		"longname": "Member Block +/- (Party Select: Character Switch)",
		"description": "Enables or disables the availability of this character in the game, as well as in the right-hand selector pane in the party select menu. If the character is currently in the party, this will have no effect as the character is already displayed in the current party list (left pane). This turns the character on or off globally. That is, if you turn off the character and then query whether the character is available with IFMEMBQ, the comparison will not hold, and the script will jump to the second argument of IFMEMBQ.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Switches the character on/off (1/0, respectively)."
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID whose status will change ID Character 0 Cloud 1 Barret 2 Tifa 3 Aeris 4 Red XIII 5 Yuffie 6 Cait Sith 7 Vincent 8 Cid"
			}
		]
	},
	{
		"id": 206,
		"name": "MMBLK",
		"longname": "Party Select: Character Lock",
		"description": "Locks the character given by the argument in the Party Select screen. The player will not be able to move this character into or out of the party. The character IDs can be found in MMBud. This setting has global scope, that is, the character will still be locked when transitioning to a new field or to the world map and using the PHS.",
		"operands": [
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID to lock."
			}
		]
	},
	{
		"id": 207,
		"name": "MMBUK",
		"longname": "Party Select: Character Unlock",
		"description": "Unlocks the character given by the argument in the Party Select screen. The player will be able to move this character into or out of the party. The character IDs can be found in MMBud. This setting has global scope, that is, the character will still be switchable when transitioning to a new field or to the world map and using the PHS.",
		"operands": [
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Character ID to unlock"
			}
		]
	},
	{
		"id": 208,
		"name": "LINE",
		"longname": "Line Definition",
		"description": "Defines a line on the walkmesh that, when crossed by a playable character, causes one of the entity's scripts to be executed. These are similar to the triggers in Section 8. All the lines in the current field can be turned on or off by using the LINON opcode.",
		"operands": [
			{
				"name": "XA",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate of the first point of the line."
			},
			{
				"name": "YA",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate of the first point of the line."
			},
			{
				"name": "ZA",
				"size": "Bytewise(Int16ul)",
				"description": "Z-coordinate of the first point of the line."
			},
			{
				"name": "XB",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate of the second point of the line."
			},
			{
				"name": "YB",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate of the second point of the line."
			},
			{
				"name": "ZB",
				"size": "Bytewise(Int16ul)",
				"description": "Z-coordinate of the second point of the line."
			}
		]
	},
	{
		"id": 209,
		"name": "LINON",
		"longname": "Line Switch",
		"description": "Turns on or off all the LINEs in the current field; if set to off, none of the lines will be triggered by the character walking through them.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Switch on/off (1/0, respectively)."
			}
		]
	},
	{
		"id": 210,
		"name": "MPJPO",
		"longname": "Gateway Switch (Map Jump Off)",
		"description": "Turns on or off all the gateways in the current field. If set to off, the player will not be able to transition to other fields defined by the gateways. MAPJUMP opcodes are not affected, and so a combination of LINEs and MAPJUMP could still achieve this.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Switch on/off (0/1, respectively)."
			}
		]
	},
	{
		"id": 211,
		"name": "SLINE",
		"longname": "Set Line",
		"description": "Alters the two points of a previously defined LINE. In addition to allowing a line to be adjusted after creation, this opcode also provides the ability to retrieve line end-point values from memory. If two or more lines are defined in one entity, SLINE only updates the first LINE definition.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "XA Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "YA Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "ZA bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "XB Bank"
			},
			{
				"name": "B5",
				"size": "BitsInteger(4)",
				"description": "YB Bank"
			},
			{
				"name": "B6",
				"size": "BitsInteger(4)",
				"description": "ZB Bank"
			},
			{
				"name": "XA",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate of the first point of the line."
			},
			{
				"name": "YA",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate of the first point of the line."
			},
			{
				"name": "ZA",
				"size": "Bytewise(Int16ul)",
				"description": "Z-coordinate of the first point of the line."
			},
			{
				"name": "XB",
				"size": "Bytewise(Int16ul)",
				"description": "X-coordinate of the second point of the line."
			},
			{
				"name": "YB",
				"size": "Bytewise(Int16ul)",
				"description": "Y-coordinate of the second point of the line."
			},
			{
				"name": "ZB",
				"size": "Bytewise(Int16ul)",
				"description": "Z-coordinate of the second point of the line."
			}
		]
	},
	{
		"id": 212,
		"name": "SIN",
		"longname": null,
		"description": null
	},
	{
		"id": 213,
		"name": "COS",
		"longname": null,
		"description": null
	},
	{
		"id": 214,
		"name": "TLKR2",
		"longname": "Talk Range (16-bit)",
		"description": "Similar to TALKR, but allows a two-byte range value to be used.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "R Bank"
			},
			{
				"name": "R",
				"size": "Bytewise(Int16ul)",
				"description": "Range value."
			}
		]
	},
	{
		"id": 215,
		"name": "SLDR2",
		"longname": "Solid Range (16-bit)",
		"description": "Similar to SLIDR, but allows a two-byte range value to be used.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "R Bank"
			},
			{
				"name": "R",
				"size": "Bytewise(Int16ul)",
				"description": "Range value."
			}
		]
	},
	{
		"id": 216,
		"name": "PMJMP",
		"longname": "Prepare Field Change",
		"description": "Prepare to jump to the field indicated by I. Use before making the map jump.",
		"operands": [
			{
				"name": "I",
				"size": "Bytewise(Int8ul)",
				"description": "Field ID of the map to prepare to jump to."
			}
		]
	},
	{
		"id": 217,
		"name": "PMJMP2",
		"longname": null,
		"description": null
	},
	{
		"id": 218,
		"name": "AKAO2",
		"longname": "Sound Operation (word param1)",
		"description": "Perform an operation described by Op, and uses the parameters depending on the operation.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "P1 bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "P2 bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "P3 bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "P4 bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B5",
				"size": "BitsInteger(4)",
				"description": "P5 bank"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Operation to perform"
			},
			{
				"name": "P1",
				"size": "Bytewise(Int8ul)",
				"description": "Parameter 1"
			},
			{
				"name": "P2",
				"size": "Bytewise(Int8ul)",
				"description": "Parameter 2"
			},
			{
				"name": "P3",
				"size": "Bytewise(Int8ul)",
				"description": "Parameter 3"
			},
			{
				"name": "P4",
				"size": "Bytewise(Int8ul)",
				"description": "Parameter 4"
			},
			{
				"name": "P5",
				"size": "Bytewise(Int8ul)",
				"description": "Parameter 5"
			}
		]
	},
	{
		"id": 219,
		"name": "FCFIX",
		"longname": "Character rotatability",
		"description": "If rotation is locked it will not be changed during movement. And some other events. You still can set it directly using DIR.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "1 - lock"
			}
		]
	},
	{
		"id": 220,
		"name": "CCANM",
		"longname": "Stand/Walk/Run animation",
		"description": "Opcode set animation id used for standart player action: stand, walk and run. This is global for location so if you want to change your player model you need to be sure that this model has animation with this id.",
		"operands": [
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Animation ID for selected action."
			},
			{
				"name": "I",
				"size": "Bytewise(Int8ul)",
				"description": "Id of selected action. (0 - stand, 1 - walk, 2 - run)"
			}
		]
	},
	{
		"id": 221,
		"name": "ANIMB",
		"longname": "Stop Animation",
		"description": "Stop current playing animation in the current frame (set current frame as last frame). Model will stay in this last frame until next animation is not activated"
	},
	{
		"id": 222,
		"name": "TURNW",
		"longname": "Wait for Turn",
		"description": "Halts execution of the current script for a preceding turn to complete. When the object has fully turned, execution continues. This works fine, exept TURN, TURNGEN and TURA is waitable opcode itself, so this is ignored. Perhaps this is deprecated opcode"
	},
	{
		"id": 223,
		"name": "MPPAL",
		"longname": "Multiply Palette",
		"description": "Multiply stored palette from start colour by some colour",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "Bank for start colour"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "Bank for multiply blue colour"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "Bank for multiply green colour"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "Bank for multiply red colour"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B5",
				"size": "BitsInteger(4)",
				"description": "Bank for size of palette data"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Origin palette array id. Take data from here and multiply it by BRG colour."
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination palette array id. Here we store data after multiplication"
			},
			{
				"name": "C",
				"size": "Bytewise(Int8ul)",
				"description": "Start colour for multiplication"
			},
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Blue value for multiplying"
			},
			{
				"name": "G",
				"size": "Bytewise(Int8ul)",
				"description": "Green value for multiplying"
			},
			{
				"name": "R",
				"size": "Bytewise(Int8ul)",
				"description": "Red value for multiplying"
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Size of palette data to multiply + 1"
			}
		]
	},
	{
		"id": 224,
		"name": "BGON",
		"longname": "Background On",
		"description": "Turns on the portion of background whose background sprite belongs to the scripted area and state specified. Parts of the background image (or more accurately, specific sprites) may be assigned a \"scripted area\" that allows control over that portion of the background by the scripting system. Within each scripted area, backgrounds are drawn on top of each other in layers, on the same location; these can represent a door in both open and closed states, for example, allowing the script to switch between an open door when a trigger is crossed and a closed door otherwise by simply turning off the \"closed door\" background and turning on the \"open door\" background.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "L bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "The ID of the background area to manipulate, as specified in the background's sprite."
			},
			{
				"name": "L",
				"size": "Bytewise(Int8ul)",
				"description": "The ID of the layer of L to display (turn on), as specified in the background's sprite."
			}
		]
	},
	{
		"id": 225,
		"name": "BGOFF",
		"longname": "Background Off",
		"description": "Similar to BGON, only this opcode turns off the portion of background whose background sprite specifies it as belonging to the scripted area and layer specified.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "A Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "L bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "The ID of the background area to manipulate, as specified in the background's sprite."
			},
			{
				"name": "L",
				"size": "Bytewise(Int8ul)",
				"description": "The ID of the layer of L to display (turn off), as specified in the background's sprite."
			}
		]
	},
	{
		"id": 226,
		"name": "BGROL",
		"longname": "Background Roll",
		"description": "Turns on the next numerical layer in the background area specified by A. For example, if background area 3 is currently set to display layer 1 for that particular area, a call to BGROL(0,3) will display layer 2 for that area. If an invalid layer is given, or the background rolls past the last layer for this area, no background is displayed by this opcode.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "The ID of the background area to roll, as specified in the background's sprite."
			}
		]
	},
	{
		"id": 227,
		"name": "BGROL2",
		"longname": "Background Roll (Reverse)",
		"description": "Similar to BGROL, except the roll runs backwards through layers, rather than forwards. Rolling backwards past layer 0 for the area specified results in no background being shown.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "The ID of the background area to roll, as specified in the background's sprite."
			}
		]
	},
	{
		"id": 228,
		"name": "BGCLR",
		"longname": "Background Clear",
		"description": "Hides all portions of background whose sprite specifies that it belongs to the background area given by A.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "The ID of the background area to clear, as specified in the background's sprite, or the address to retrieve the value if B is non-zero."
			}
		]
	},
	{
		"id": 229,
		"name": "STPAL",
		"longname": "Store Palette",
		"description": "Stores palette data to special array (0x80095de0 in english psx version)",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "M Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "P Bank"
			},
			{
				"name": "M",
				"size": "Bytewise(Int8ul)",
				"description": "Id of palette. All palettes stored starting from vram_x = 0, vram_y = 0x1e0, so this index is starting from vram_y."
			},
			{
				"name": "P",
				"size": "Bytewise(Int8ul)",
				"description": "All palette stored from in special array 0x20 size of each item. But it just index and can be used lo load full 256 colours (it just takes 0x10 slots of array)."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Size of palette to copy + 1"
			}
		]
	},
	{
		"id": 230,
		"name": "LDPAL",
		"longname": "Load Palette",
		"description": "Load palette from stored array back to vram",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "M Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "P Bank"
			},
			{
				"name": "M",
				"size": "Bytewise(Int8ul)",
				"description": "Id of palette. All palettes loaded starting from vram_x = 0, vram_y = 0x1e0, so this index is starting from vram_y."
			},
			{
				"name": "P",
				"size": "Bytewise(Int8ul)",
				"description": "All palette stored from in special array 0x20 size of each item. But it just index and can be used lo load full 256 colours (it just takes 0x10 slots of array)."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Size of palette to copy + 1"
			}
		]
	},
	{
		"id": 231,
		"name": "CPPAL",
		"longname": "Copy Palette",
		"description": "Copy palette data.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "O Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "D Bank"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Source palette array id to copy data from"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination palette array id to copy data to."
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Size of palette to copy + 1"
			}
		]
	},
	{
		"id": 232,
		"name": "RTPAL",
		"longname": null,
		"description": null
	},
	{
		"id": 233,
		"name": "ADPAL",
		"longname": null,
		"description": null
	},
	{
		"id": 234,
		"name": "MPPAL2",
		"longname": "Multiply Palette",
		"description": "Multiply stored palette by some colour.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "O Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "D Bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "B Bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "G Bank"
			},
			{
				"name": "B5",
				"size": "BitsInteger(4)",
				"description": "R Bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Source palette array id to copy data from"
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Destination palette array id to copy data to."
			},
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "Blue value for multiplying"
			},
			{
				"name": "G",
				"size": "Bytewise(Int8ul)",
				"description": "Green value for multiplying"
			},
			{
				"name": "R",
				"size": "Bytewise(Int8ul)",
				"description": "Red value for multiplying"
			},
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Size of palette data to multiply + 1"
			}
		]
	},
	{
		"id": 235,
		"name": "STPLS",
		"longname": null,
		"description": null
	},
	{
		"id": 236,
		"name": "LDPLS",
		"longname": null,
		"description": null
	},
	{
		"id": 237,
		"name": "CPPAL2",
		"longname": null,
		"description": null
	},
	{
		"id": 238,
		"name": "RTPAL2",
		"longname": null,
		"description": null
	},
	{
		"id": 239,
		"name": "ADPAL2",
		"longname": null,
		"description": null
	},
	{
		"id": 240,
		"name": "MUSIC",
		"longname": "Play Music",
		"description": "Plays the music that has been defined for the field file. Multiple files of music can be set to play in one field file, so that they may be switched between during play in the field. If the argument is an index beyond the size of the list of music files set in the current field file, the game will crash.",
		"operands": [
			{
				"name": "I",
				"size": "Bytewise(Int8ul)",
				"description": "ID for the music file that has been set in the field file."
			}
		]
	},
	{
		"id": 241,
		"name": "SOUND",
		"longname": "Play Sound",
		"description": "Plays the sound file indicated by I, or if B1 is non-zero, plays the sound with ID found at bank B1 and address I. The direction of the sound can also be specified, with 0 indicating the left speaker and FF indicating the right speaker, although for the sound to play at the center, the value is at approximately 0x40.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "I Bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "D Bank"
			},
			{
				"name": "I",
				"size": "Bytewise(Int8ul)",
				"description": "Sound ID to play, or lower byte indicating address and higher byte zero, if B1 is non-zero."
			},
			{
				"name": "D",
				"size": "Bytewise(Int8ul)",
				"description": "Directional sound, or address to find direction value, if B2 is non-zero."
			}
		]
	},
	{
		"id": 242,
		"name": "AKAO",
		"longname": "Sound Operation (byte param1)",
		"description": "Perform an operation described by Op, and uses the parameters depending on the operation.",
		"operands": [
			{
				"name": "B1",
				"size": "BitsInteger(4)",
				"description": "P1 bank"
			},
			{
				"name": "B2",
				"size": "BitsInteger(4)",
				"description": "P2 bank"
			},
			{
				"name": "B3",
				"size": "BitsInteger(4)",
				"description": "P3 bank"
			},
			{
				"name": "B4",
				"size": "BitsInteger(4)",
				"description": "P4 bank"
			},
			{
				"name": "0",
				"size": "BitsInteger(4)",
				"description": "Zero"
			},
			{
				"name": "B5",
				"size": "BitsInteger(4)",
				"description": "P5 bank"
			},
			{
				"name": "O",
				"size": "Bytewise(Int8ul)",
				"description": "Operation to perform"
			},
			{
				"name": "P1",
				"size": "Bytewise(Int8ul)",
				"description": "Parameter 1"
			},
			{
				"name": "P2",
				"size": "Bytewise(Int8ul)",
				"description": "Parameter 2"
			},
			{
				"name": "P3",
				"size": "Bytewise(Int8ul)",
				"description": "Parameter 3"
			},
			{
				"name": "P4",
				"size": "Bytewise(Int8ul)",
				"description": "Parameter 4"
			},
			{
				"name": "P5",
				"size": "Bytewise(Int8ul)",
				"description": "Parameter 5"
			}
		]
	},
	{
		"id": 243,
		"name": "MUSVT",
		"longname": null,
		"description": null
	},
	{
		"id": 244,
		"name": "MUSVM",
		"longname": null,
		"description": null
	},
	{
		"id": 245,
		"name": "MULCK",
		"longname": "Music Lock",
		"description": "Locks the MUSIC to the current selection. Subsequent calls to change the music will fail unless a corresponding MULCK set to 0 is executed.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Lock on/off (1/0, respectively)."
			}
		]
	},
	{
		"id": 246,
		"name": "BMUSC",
		"longname": "Battle Music",
		"description": "Sets the MUSIC that will play when the next BATTLE is issued. As with the MUSIC opcode, the ID represents an offset into the list of music files that have been set by the field file. Hence, provided the field file has the correct music file(s) set, this opcode can be used to set regular or boss battle music for the current field's encounters, or even switched between in the script.",
		"operands": [
			{
				"name": "I",
				"size": "Bytewise(Int8ul)",
				"description": "ID of the music file to play, as set in the field file."
			}
		]
	},
	{
		"id": 247,
		"name": "CHMPH",
		"longname": null,
		"description": null
	},
	{
		"id": 248,
		"name": "PMVIE",
		"longname": "Set Movie",
		"description": "Sets the movie file that will be played at a future point in the script by MOVIE.",
		"operands": [
			{
				"name": "M",
				"size": "Bytewise(Int8ul)",
				"description": "Movie ID to set."
			}
		]
	},
	{
		"id": 249,
		"name": "MOVIE",
		"longname": "Play Movie",
		"description": "Plays the movie previously defined by PMVIE. Note that further execution of the current script is halted until the movie has finished playing, and a playable character is still able to move whilst the movie is being played, so player movements may be frozen first. In addition, field music currently playing will continue to do so unless explicitly instructed otherwise. Note that MOVIE removes the availability of the hand pointer above the player's head, even after the movie has finished playing. To re-enable it, use SPECIAL: POINT."
	},
	{
		"id": 250,
		"name": "MVIEF",
		"longname": "Movie Frame",
		"description": "Stores the frame number of the current MOVIE that is being displayed, in the bank and address specified.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store result."
			}
		]
	},
	{
		"id": 251,
		"name": "MVCAM",
		"longname": "Movie Camera Switch",
		"description": "Turns on or off the use of the camera supplied by a movie file, that will be played at a future point in the script. If off, the field camera remains in use. If set to on, the camera defined in the movie file is used, including any movement of the camera to match the movie itself.",
		"operands": [
			{
				"name": "S",
				"size": "Bytewise(Int8ul)",
				"description": "Switch on/off (0/1, respectively)."
			}
		]
	},
	{
		"id": 252,
		"name": "FMUSC",
		"longname": null,
		"description": null
	},
	{
		"id": 253,
		"name": "CMUSC",
		"longname": null,
		"description": null
	},
	{
		"id": 254,
		"name": "CHMST",
		"longname": "Check Music",
		"description": "Stores a boolean value (0 for false, 1 for true) in the bank and address specified, indicating whether music is currently playing.",
		"operands": [
			{
				"name": "B",
				"size": "Bytewise(Int8ul)",
				"description": "A Bank"
			},
			{
				"name": "A",
				"size": "Bytewise(Int8ul)",
				"description": "Address to store result."
			}
		]
	},
	{
		"id": 255,
		"name": "GAMEOVER",
		"longname": "Game over",
		"description": "Instantaneously ends the current game, displaying the 'Game Over' screen; subsequent script commands are not executed. As per a normal game over, after the user presses [OK], the game returns to the main start menu."
	}
]